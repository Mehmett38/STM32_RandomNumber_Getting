
002_UartTransmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec8  08004ec8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec8  08004ec8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0bb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c82  00000000  00000000  0002b15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202d4  00000000  00000000  0002dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b211  00000000  00000000  0004e01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000badc0  00000000  00000000  0005922d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113fed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000293c  00000000  00000000  00114040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0011697c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001169a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d30 	.word	0x08004d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d30 	.word	0x08004d30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_UART_RxCpltCallback>:
uint8_t loop = 0;
uint32_t rndNumber = 0;
volatile int i = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_UART_RxCpltCallback+0x28>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d107      	bne.n	8000290 <HAL_UART_RxCpltCallback+0x20>
	{
		receiverFlag = 1;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_UART_RxCpltCallback+0x2c>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, (uint8_t*)rxArray, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	4905      	ldr	r1, [pc, #20]	; (80002a0 <HAL_UART_RxCpltCallback+0x30>)
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f002 fb9c 	bl	80029c8 <HAL_UART_Receive_IT>
	}
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000008c 	.word	0x2000008c
 800029c:	20000195 	.word	0x20000195
 80002a0:	20000194 	.word	0x20000194

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fb66 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f864 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f000 f920 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b4:	f000 f8ee 	bl	8000494 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002b8:	f000 f8bc 	bl	8000434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxArray,1);
 80002bc:	2201      	movs	r2, #1
 80002be:	4927      	ldr	r1, [pc, #156]	; (800035c <main+0xb8>)
 80002c0:	4827      	ldr	r0, [pc, #156]	; (8000360 <main+0xbc>)
 80002c2:	f002 fb81 	bl	80029c8 <HAL_UART_Receive_IT>
  srand(time(NULL));
 80002c6:	2000      	movs	r0, #0
 80002c8:	f003 fd04 	bl	8003cd4 <time>
 80002cc:	4602      	mov	r2, r0
 80002ce:	460b      	mov	r3, r1
 80002d0:	4613      	mov	r3, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fc92 	bl	8003bfc <srand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop = rxArray[0];
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <main+0xb8>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <main+0xc0>)
 80002de:	701a      	strb	r2, [r3, #0]
	if(receiverFlag == 1)
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <main+0xc4>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d1f7      	bne.n	80002d8 <main+0x34>
	{
		for(i = 0; i<loop; i++)
 80002e8:	4b20      	ldr	r3, [pc, #128]	; (800036c <main+0xc8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	e02a      	b.n	8000346 <main+0xa2>
		{
			rndNumber = rand();
 80002f0:	f003 fcb2 	bl	8003c58 <rand>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <main+0xcc>)
 80002fa:	601a      	str	r2, [r3, #0]
			rndTx[0]= rndNumber & 0xff;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <main+0xcc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <main+0xd0>)
 8000304:	701a      	strb	r2, [r3, #0]
			rndTx[1]= (rndNumber >> 8)  & 0xff;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <main+0xcc>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	0a1b      	lsrs	r3, r3, #8
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <main+0xd0>)
 8000310:	705a      	strb	r2, [r3, #1]
			rndTx[2]= (rndNumber >> 16)  & 0xff;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0xcc>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <main+0xd0>)
 800031c:	709a      	strb	r2, [r3, #2]
			rndTx[3]= (rndNumber >> 24)  & 0xff;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <main+0xcc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	0e1b      	lsrs	r3, r3, #24
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <main+0xd0>)
 8000328:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit(&huart1, (uint8_t*)rndTx, sizeof(rndTx),100);
 800032a:	2364      	movs	r3, #100	; 0x64
 800032c:	2204      	movs	r2, #4
 800032e:	4911      	ldr	r1, [pc, #68]	; (8000374 <main+0xd0>)
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <main+0xbc>)
 8000332:	f002 fab5 	bl	80028a0 <HAL_UART_Transmit>
			HAL_Delay(5);
 8000336:	2005      	movs	r0, #5
 8000338:	f000 fb84 	bl	8000a44 <HAL_Delay>
		for(i = 0; i<loop; i++)
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <main+0xc8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <main+0xc8>)
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <main+0xc0>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	461a      	mov	r2, r3
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <main+0xc8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	429a      	cmp	r2, r3
 8000352:	dccd      	bgt.n	80002f0 <main+0x4c>
		}
		receiverFlag = 0;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <main+0xc4>)
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
	loop = rxArray[0];
 800035a:	e7bd      	b.n	80002d8 <main+0x34>
 800035c:	20000194 	.word	0x20000194
 8000360:	2000008c 	.word	0x2000008c
 8000364:	2000019c 	.word	0x2000019c
 8000368:	20000195 	.word	0x20000195
 800036c:	200001a4 	.word	0x200001a4
 8000370:	200001a0 	.word	0x200001a0
 8000374:	20000198 	.word	0x20000198

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b096      	sub	sp, #88	; 0x58
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fc30 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 031c 	add.w	r3, r7, #28
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fe6b 	bl	80010b0 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003e0:	f000 f8ee 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2302      	movs	r3, #2
 80003ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fe93 	bl	800212c <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800040c:	f000 f8d8 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000410:	2301      	movs	r3, #1
 8000412:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000414:	2300      	movs	r3, #0
 8000416:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	4618      	mov	r0, r3
 800041c:	f002 f8bc 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000426:	f000 f8cb 	bl	80005c0 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3758      	adds	r7, #88	; 0x58
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART1_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART1_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART1_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART1_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000478:	f002 f9c4 	bl	8002804 <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f89d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000008c 	.word	0x2000008c
 8000490:	40013800 	.word	0x40013800

08000494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART2_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART2_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d8:	f002 f994 	bl	8002804 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f86d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000110 	.word	0x20000110
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_GPIO_Init+0xc4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f000 fd85 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0xc8>)
 800058e:	f000 fc05 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000592:	2320      	movs	r3, #32
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f000 fbf6 	bl	8000d9c <HAL_GPIO_Init>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000602:	2007      	movs	r0, #7
 8000604:	f000 fb12 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <HAL_UART_MspInit+0xe8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d130      	bne.n	8000698 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <HAL_UART_MspInit+0xec>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a31      	ldr	r2, [pc, #196]	; (8000700 <HAL_UART_MspInit+0xec>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <HAL_UART_MspInit+0xec>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <HAL_UART_MspInit+0xec>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <HAL_UART_MspInit+0xec>)
 8000654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <HAL_UART_MspInit+0xec>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000676:	2307      	movs	r3, #7
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4820      	ldr	r0, [pc, #128]	; (8000704 <HAL_UART_MspInit+0xf0>)
 8000682:	f000 fb8b 	bl	8000d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2025      	movs	r0, #37	; 0x25
 800068c:	f000 fad9 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000690:	2025      	movs	r0, #37	; 0x25
 8000692:	f000 faf2 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000696:	e02d      	b.n	80006f4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <HAL_UART_MspInit+0xf4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d128      	bne.n	80006f4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_UART_MspInit+0xec>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006d2:	230c      	movs	r3, #12
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e2:	2307      	movs	r3, #7
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fb54 	bl	8000d9c <HAL_GPIO_Init>
}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40013800 	.word	0x40013800
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800
 8000708:	40004400 	.word	0x40004400

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f954 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <USART1_IRQHandler+0x10>)
 8000766:	f002 f97d 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000008c 	.word	0x2000008c

08000774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	return 1;
 8000778:	2301      	movs	r3, #1
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_kill>:

int _kill(int pid, int sig)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800078e:	f003 fa03 	bl	8003b98 <__errno>
 8000792:	4603      	mov	r3, r0
 8000794:	2216      	movs	r2, #22
 8000796:	601a      	str	r2, [r3, #0]
	return -1;
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_exit>:

void _exit (int status)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ffe7 	bl	8000784 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007b6:	e7fe      	b.n	80007b6 <_exit+0x12>

080007b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000852:	605a      	str	r2, [r3, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_isatty>:

int _isatty(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f003 f968 	bl	8003b98 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20003000 	.word	0x20003000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	200001a8 	.word	0x200001a8
 80008fc:	200001c0 	.word	0x200001c0

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490e      	ldr	r1, [pc, #56]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0b      	ldr	r4, [pc, #44]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094e:	f7ff ffd7 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000952:	f003 f927 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff fca5 	bl	80002a4 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000968:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 800096c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000970:	200001c0 	.word	0x200001c0

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f94f 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe1a 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f967 	bl	8000c96 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f92f 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001ac 	.word	0x200001ac

08000a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001ac 	.word	0x200001ac

08000a44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff3e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff31 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa2 	bl	8000be8 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d008      	beq.n	8000cd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e020      	b.n	8000d14 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 020e 	bic.w	r2, r2, #14
 8000ce0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d005      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e027      	b.n	8000d92 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 020e 	bic.w	r2, r2, #14
 8000d50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0201 	bic.w	r2, r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
    } 
  }
  return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e14e      	b.n	800104a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8140 	beq.w	8001044 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0203 	and.w	r2, r3, #3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 809a 	beq.w	8001044 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <HAL_GPIO_Init+0x2cc>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x2cc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b52      	ldr	r3, [pc, #328]	; (8001068 <HAL_GPIO_Init+0x2cc>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f28:	4a50      	ldr	r2, [pc, #320]	; (800106c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a46      	ldr	r2, [pc, #280]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1dc>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a45      	ldr	r2, [pc, #276]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1d8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_GPIO_Init+0x2dc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1d4>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f70:	2305      	movs	r3, #5
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8e:	4937      	ldr	r1, [pc, #220]	; (800106c <HAL_GPIO_Init+0x2d0>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2e0>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aea9 	bne.w	8000dac <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f001 b823 	b.w	800211c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 817d 	beq.w	80013e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ec:	4bbc      	ldr	r3, [pc, #752]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d00c      	beq.n	8001112 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f8:	4bb9      	ldr	r3, [pc, #740]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d15c      	bne.n	80011be <HAL_RCC_OscConfig+0x10e>
 8001104:	4bb6      	ldr	r3, [pc, #728]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d155      	bne.n	80011be <HAL_RCC_OscConfig+0x10e>
 8001112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001116:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001126:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	095b      	lsrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x94>
 800113e:	4ba8      	ldr	r3, [pc, #672]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e015      	b.n	8001170 <HAL_RCC_OscConfig+0xc0>
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001160:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800116c:	4b9c      	ldr	r3, [pc, #624]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001174:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001178:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800117c:	fa92 f2a2 	rbit	r2, r2
 8001180:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001184:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f002 021f 	and.w	r2, r2, #31
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 811f 	beq.w	80013e4 <HAL_RCC_OscConfig+0x334>
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8116 	bne.w	80013e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f000 bfaf 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x12e>
 80011d0:	4b83      	ldr	r3, [pc, #524]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a82      	ldr	r2, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e036      	b.n	800124c <HAL_RCC_OscConfig+0x19c>
 80011de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x158>
 80011ee:	4b7c      	ldr	r3, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7b      	ldr	r2, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a78      	ldr	r2, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e021      	b.n	800124c <HAL_RCC_OscConfig+0x19c>
 8001208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x184>
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a70      	ldr	r2, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0x19c>
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f023 020f 	bic.w	r2, r3, #15
 8001254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	495f      	ldr	r1, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001262:	4313      	orrs	r3, r2
 8001264:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d059      	beq.n	800132a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fbd9 	bl	8000a2c <HAL_GetTick>
 800127a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fbd4 	bl	8000a2c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d902      	bls.n	8001296 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	f000 bf43 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	095b      	lsrs	r3, r3, #5
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d102      	bne.n	80012c8 <HAL_RCC_OscConfig+0x218>
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	e015      	b.n	80012f4 <HAL_RCC_OscConfig+0x244>
 80012c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001300:	fa92 f2a2 	rbit	r2, r2
 8001304:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001308:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800130c:	fab2 f282 	clz	r2, r2
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f042 0220 	orr.w	r2, r2, #32
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f002 021f 	and.w	r2, r2, #31
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ab      	beq.n	8001280 <HAL_RCC_OscConfig+0x1d0>
 8001328:	e05d      	b.n	80013e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb7f 	bl	8000a2c <HAL_GetTick>
 800132e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fb7a 	bl	8000a2c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d902      	bls.n	800134a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	f000 bee9 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800135e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0x2cc>
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	e015      	b.n	80013a8 <HAL_RCC_OscConfig+0x2f8>
 800137c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001380:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001398:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_RCC_OscConfig+0x330>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013b4:	fa92 f2a2 	rbit	r2, r2
 80013b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013c0:	fab2 f282 	clz	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f002 021f 	and.w	r2, r2, #31
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ab      	bne.n	8001334 <HAL_RCC_OscConfig+0x284>
 80013dc:	e003      	b.n	80013e6 <HAL_RCC_OscConfig+0x336>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 817d 	beq.w	80016f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013fc:	4ba6      	ldr	r3, [pc, #664]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00b      	beq.n	8001420 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001408:	4ba3      	ldr	r3, [pc, #652]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d172      	bne.n	80014fa <HAL_RCC_OscConfig+0x44a>
 8001414:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d16c      	bne.n	80014fa <HAL_RCC_OscConfig+0x44a>
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001432:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x3a0>
 800144a:	4b93      	ldr	r3, [pc, #588]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	e013      	b.n	8001478 <HAL_RCC_OscConfig+0x3c8>
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001468:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001474:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2202      	movs	r2, #2
 800147a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800147e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001482:	fa92 f2a2 	rbit	r2, r2
 8001486:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800148a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00a      	beq.n	80014c0 <HAL_RCC_OscConfig+0x410>
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d002      	beq.n	80014c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 be2e 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	21f8      	movs	r1, #248	; 0xf8
 80014d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014de:	fa91 f1a1 	rbit	r1, r1
 80014e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014ea:	fab1 f181 	clz	r1, r1
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	408b      	lsls	r3, r1
 80014f2:	4969      	ldr	r1, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f8:	e0fd      	b.n	80016f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8088 	beq.w	800161c <HAL_RCC_OscConfig+0x56c>
 800150c:	2301      	movs	r3, #1
 800150e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800151e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800152c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	461a      	mov	r2, r3
 8001534:	2301      	movs	r3, #1
 8001536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa78 	bl	8000a2c <HAL_GetTick>
 800153c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fa73 	bl	8000a2c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d902      	bls.n	8001558 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	f000 bde2 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800156a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <HAL_RCC_OscConfig+0x4d8>
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	e013      	b.n	80015b0 <HAL_RCC_OscConfig+0x500>
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2202      	movs	r2, #2
 80015b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015ba:	fa92 f2a2 	rbit	r2, r2
 80015be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015c6:	fab2 f282 	clz	r2, r2
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f042 0220 	orr.w	r2, r2, #32
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	f002 021f 	and.w	r2, r2, #31
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0af      	beq.n	8001542 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	21f8      	movs	r1, #248	; 0xf8
 80015f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001600:	fa91 f1a1 	rbit	r1, r1
 8001604:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001608:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800160c:	fab1 f181 	clz	r1, r1
 8001610:	b2c9      	uxtb	r1, r1
 8001612:	408b      	lsls	r3, r1
 8001614:	4920      	ldr	r1, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
 800161a:	e06c      	b.n	80016f6 <HAL_RCC_OscConfig+0x646>
 800161c:	2301      	movs	r3, #1
 800161e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800162e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800163c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	461a      	mov	r2, r3
 8001644:	2300      	movs	r3, #0
 8001646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff f9f0 	bl	8000a2c <HAL_GetTick>
 800164c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff f9eb 	bl	8000a2c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d902      	bls.n	8001668 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	f000 bd5a 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800167a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d104      	bne.n	800169c <HAL_RCC_OscConfig+0x5ec>
 8001692:	4b01      	ldr	r3, [pc, #4]	; (8001698 <HAL_RCC_OscConfig+0x5e8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	e015      	b.n	80016c4 <HAL_RCC_OscConfig+0x614>
 8001698:	40021000 	.word	0x40021000
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016c0:	4bc8      	ldr	r3, [pc, #800]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	2202      	movs	r2, #2
 80016c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ce:	fa92 f2a2 	rbit	r2, r2
 80016d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f002 021f 	and.w	r2, r2, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ad      	bne.n	8001652 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8110 	beq.w	800192c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d079      	beq.n	8001810 <HAL_RCC_OscConfig+0x760>
 800171c:	2301      	movs	r3, #1
 800171e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800172e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	4bab      	ldr	r3, [pc, #684]	; (80019e8 <HAL_RCC_OscConfig+0x938>)
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	461a      	mov	r2, r3
 8001742:	2301      	movs	r3, #1
 8001744:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff f971 	bl	8000a2c <HAL_GetTick>
 800174a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff f96c 	bl	8000a2c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d902      	bls.n	8001766 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	f000 bcdb 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c0:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 80017c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017cc:	2102      	movs	r1, #2
 80017ce:	6019      	str	r1, [r3, #0]
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fa93 f1a3 	rbit	r1, r3
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017e6:	6019      	str	r1, [r3, #0]
  return result;
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0a0      	beq.n	8001750 <HAL_RCC_OscConfig+0x6a0>
 800180e:	e08d      	b.n	800192c <HAL_RCC_OscConfig+0x87c>
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001832:	601a      	str	r2, [r3, #0]
  return result;
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x938>)
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	461a      	mov	r2, r3
 800184e:	2300      	movs	r3, #0
 8001850:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff f8eb 	bl	8000a2c <HAL_GetTick>
 8001856:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff f8e6 	bl	8000a2c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d902      	bls.n	8001872 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	f000 bc55 	b.w	800211c <HAL_RCC_OscConfig+0x106c>
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018c2:	2202      	movs	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018ea:	2102      	movs	r1, #2
 80018ec:	6019      	str	r1, [r3, #0]
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f1a3 	rbit	r1, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001904:	6019      	str	r1, [r3, #0]
  return result;
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d197      	bne.n	800185c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 81a1 	beq.w	8001c84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d116      	bne.n	8001982 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	61d3      	str	r3, [r2, #28]
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800197a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_RCC_OscConfig+0x93c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d11a      	bne.n	80019c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_RCC_OscConfig+0x93c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_RCC_OscConfig+0x93c>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff f847 	bl	8000a2c <HAL_GetTick>
 800199e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a4:	f7ff f842 	bl	8000a2c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e3b1      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_OscConfig+0x93c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x940>
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a02      	ldr	r2, [pc, #8]	; (80019e4 <HAL_RCC_OscConfig+0x934>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e03c      	b.n	8001a5c <HAL_RCC_OscConfig+0x9ac>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	10908120 	.word	0x10908120
 80019ec:	40007000 	.word	0x40007000
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x96a>
 8001a00:	4bc1      	ldr	r3, [pc, #772]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4ac0      	ldr	r2, [pc, #768]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	4bbe      	ldr	r3, [pc, #760]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4abd      	ldr	r2, [pc, #756]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	f023 0304 	bic.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e020      	b.n	8001a5c <HAL_RCC_OscConfig+0x9ac>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x994>
 8001a2a:	4bb7      	ldr	r3, [pc, #732]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4ab6      	ldr	r2, [pc, #728]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4bb4      	ldr	r3, [pc, #720]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4ab3      	ldr	r2, [pc, #716]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x9ac>
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4aaf      	ldr	r2, [pc, #700]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4bad      	ldr	r3, [pc, #692]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4aac      	ldr	r2, [pc, #688]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8081 	beq.w	8001b70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7fe ffdd 	bl	8000a2c <HAL_GetTick>
 8001a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7fe ffd8 	bl	8000a2c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e345      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ae0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0xa4c>
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	e013      	b.n	8001b24 <HAL_RCC_OscConfig+0xa74>
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	6011      	str	r1, [r2, #0]
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	fa92 f1a2 	rbit	r1, r2
 8001b3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b46:	6011      	str	r1, [r2, #0]
  return result;
 8001b48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d084      	beq.n	8001a78 <HAL_RCC_OscConfig+0x9c8>
 8001b6e:	e07f      	b.n	8001c70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff5c 	bl	8000a2c <HAL_GetTick>
 8001b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7fe ff57 	bl	8000a2c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e2c4      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bd8:	601a      	str	r2, [r3, #0]
  return result;
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001be2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0xb4e>
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	e013      	b.n	8001c26 <HAL_RCC_OscConfig+0xb76>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c06:	2202      	movs	r2, #2
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c2e:	2102      	movs	r1, #2
 8001c30:	6011      	str	r1, [r2, #0]
 8001c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	fa92 f1a2 	rbit	r1, r2
 8001c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c48:	6011      	str	r1, [r2, #0]
  return result;
 8001c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f002 021f 	and.w	r2, r2, #31
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d184      	bne.n	8001b7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8242 	beq.w	800211a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_RCC_OscConfig+0xc58>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	f000 8213 	beq.w	80020ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f040 8162 	bne.w	8001f7a <HAL_RCC_OscConfig+0xeca>
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cda:	601a      	str	r2, [r3, #0]
  return result;
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ce4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fe96 	bl	8000a2c <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d04:	e00c      	b.n	8001d20 <HAL_RCC_OscConfig+0xc70>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7fe fe8e 	bl	8000a2c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1fd      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d44:	601a      	str	r2, [r3, #0]
  return result;
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0xcba>
 8001d64:	4bb0      	ldr	r3, [pc, #704]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e027      	b.n	8001dba <HAL_RCC_OscConfig+0xd0a>
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	4b9c      	ldr	r3, [pc, #624]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc6:	6011      	str	r1, [r2, #0]
 8001dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dcc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fa92 f1a2 	rbit	r1, r2
 8001dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dda:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dde:	6011      	str	r1, [r2, #0]
  return result;
 8001de0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d182      	bne.n	8001d0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	430b      	orrs	r3, r1
 8001e28:	497f      	ldr	r1, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2301      	movs	r3, #1
 8001e72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fdda 	bl	8000a2c <HAL_GetTick>
 8001e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe fdd5 	bl	8000a2c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e144      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001eb6:	601a      	str	r2, [r3, #0]
  return result;
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0xe2c>
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e027      	b.n	8001f2c <HAL_RCC_OscConfig+0xe7c>
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f30:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	fa92 f1a2 	rbit	r1, r2
 8001f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f50:	6011      	str	r1, [r2, #0]
  return result;
 8001f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d082      	beq.n	8001e7e <HAL_RCC_OscConfig+0xdce>
 8001f78:	e0cf      	b.n	800211a <HAL_RCC_OscConfig+0x106a>
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f9e:	601a      	str	r2, [r3, #0]
  return result;
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fd34 	bl	8000a2c <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7fe fd2f 	bl	8000a2c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e09e      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002002:	601a      	str	r2, [r3, #0]
  return result;
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800200c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d104      	bne.n	800202c <HAL_RCC_OscConfig+0xf7c>
 8002022:	4b01      	ldr	r3, [pc, #4]	; (8002028 <HAL_RCC_OscConfig+0xf78>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e029      	b.n	800207c <HAL_RCC_OscConfig+0xfcc>
 8002028:	40021000 	.word	0x40021000
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800205a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_OscConfig+0x1078>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002080:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	fa92 f1a2 	rbit	r1, r2
 8002098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020a0:	6011      	str	r1, [r2, #0]
  return result;
 80020a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d180      	bne.n	8001fca <HAL_RCC_OscConfig+0xf1a>
 80020c8:	e027      	b.n	800211a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e01e      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_OscConfig+0x1078>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002102:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b09e      	sub	sp, #120	; 0x78
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e162      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b90      	ldr	r3, [pc, #576]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	498b      	ldr	r1, [pc, #556]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e14a      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b82      	ldr	r3, [pc, #520]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	497f      	ldr	r1, [pc, #508]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80dc 	beq.w	8002358 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d13c      	bne.n	8002222 <HAL_RCC_ClockConfig+0xf6>
 80021a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xa6>
 80021cc:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <HAL_RCC_ClockConfig+0xc6>
 80021d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	667b      	str	r3, [r7, #100]	; 0x64
 80021e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e4:	663b      	str	r3, [r7, #96]	; 0x60
 80021e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ee:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002202:	fab2 f282 	clz	r2, r2
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f042 0220 	orr.w	r2, r2, #32
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f002 021f 	and.w	r2, r2, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d17b      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0f3      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d13c      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x178>
 800222a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_RCC_ClockConfig+0x128>
 800224e:	4b4f      	ldr	r3, [pc, #316]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e00f      	b.n	8002274 <HAL_RCC_ClockConfig+0x148>
 8002254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002258:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
 8002262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002266:	643b      	str	r3, [r7, #64]	; 0x40
 8002268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002278:	63ba      	str	r2, [r7, #56]	; 0x38
 800227a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002284:	fab2 f282 	clz	r2, r2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f002 021f 	and.w	r2, r2, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13a      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b2      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
 80022a4:	2302      	movs	r3, #2
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_ClockConfig+0x1a0>
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e00d      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1bc>
 80022cc:	2302      	movs	r3, #2
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2202      	movs	r2, #2
 80022ea:	61ba      	str	r2, [r7, #24]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	617a      	str	r2, [r7, #20]
  return result;
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f042 0220 	orr.w	r2, r2, #32
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f002 021f 	and.w	r2, r2, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e079      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	491a      	ldr	r1, [pc, #104]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7fe fb80 	bl	8000a2c <HAL_GetTick>
 800232c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7fe fb7c 	bl	8000a2c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e061      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_ClockConfig+0x260>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d214      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <HAL_RCC_ClockConfig+0x25c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e040      	b.n	800240a <HAL_RCC_ClockConfig+0x2de>
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_ClockConfig+0x2e8>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	491a      	ldr	r1, [pc, #104]	; (8002414 <HAL_RCC_ClockConfig+0x2e8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x2e8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4912      	ldr	r1, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x2e8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023ce:	f000 f829 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_RCC_ClockConfig+0x2e8>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023dc:	22f0      	movs	r2, #240	; 0xf0
 80023de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	fa92 f2a2 	rbit	r2, r2
 80023e6:	60fa      	str	r2, [r7, #12]
  return result;
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	40d3      	lsrs	r3, r2
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x2ec>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	fa21 f303 	lsr.w	r3, r1, r3
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_RCC_ClockConfig+0x2f0>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_RCC_ClockConfig+0x2f4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe face 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3778      	adds	r7, #120	; 0x78
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	08004d48 	.word	0x08004d48
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b08b      	sub	sp, #44	; 0x2c
 8002428:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x30>
 800244e:	2b08      	cmp	r3, #8
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x36>
 8002452:	e03c      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002456:	623b      	str	r3, [r7, #32]
      break;
 8002458:	e03c      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002460:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002464:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	fa92 f2a2 	rbit	r2, r2
 800246c:	607a      	str	r2, [r7, #4]
  return result;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	40d3      	lsrs	r3, r2
 8002478:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	220f      	movs	r2, #15
 8002488:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	fa92 f2a2 	rbit	r2, r2
 8002490:	60fa      	str	r2, [r7, #12]
  return result;
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	fab2 f282 	clz	r2, r2
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	40d3      	lsrs	r3, r2
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	e004      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	623b      	str	r3, [r7, #32]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024d0:	623b      	str	r3, [r7, #32]
      break;
 80024d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	372c      	adds	r7, #44	; 0x2c
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	007a1200 	.word	0x007a1200
 80024ec:	08004d60 	.word	0x08004d60
 80024f0:	08004d70 	.word	0x08004d70
 80024f4:	003d0900 	.word	0x003d0900

080024f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_RCC_GetHCLKFreq+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000000 	.word	0x20000000

08002510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002516:	f7ff ffef 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 800251a:	4601      	mov	r1, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002524:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002528:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	603a      	str	r2, [r7, #0]
  return result;
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	40d3      	lsrs	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x40>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	08004d58 	.word	0x08004d58

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800255a:	f7ff ffcd 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 800255e:	4601      	mov	r1, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002568:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800256c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	603a      	str	r2, [r7, #0]
  return result;
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	40d3      	lsrs	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004d58 	.word	0x08004d58

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b092      	sub	sp, #72	; 0x48
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80cd 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025bc:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10e      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	61d3      	str	r3, [r2, #28]
 80025d4:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b85      	ldr	r3, [pc, #532]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a81      	ldr	r2, [pc, #516]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fa15 	bl	8000a2c <HAL_GetTick>
 8002602:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7fe fa11 	bl	8000a2c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0ea      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002624:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d07d      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263e:	429a      	cmp	r2, r3
 8002640:	d076      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	461a      	mov	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	461a      	mov	r2, r3
 8002690:	2300      	movs	r3, #0
 8002692:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d045      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe f9c2 	bl	8000a2c <HAL_GetTick>
 80026a8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe f9be 	bl	8000a2c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e095      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x256>
 80026c2:	2302      	movs	r3, #2
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	2302      	movs	r3, #2
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	61fb      	str	r3, [r7, #28]
  return result;
 80026da:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d102      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026f0:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	e007      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2202      	movs	r2, #2
 8002708:	613a      	str	r2, [r7, #16]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	fa92 f2a2 	rbit	r2, r2
 8002710:	60fa      	str	r2, [r7, #12]
  return result;
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0bd      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	492e      	ldr	r1, [pc, #184]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f023 0210 	bic.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	4313      	orrs	r3, r2
 8002790:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4913      	ldr	r1, [pc, #76]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	490b      	ldr	r1, [pc, #44]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3748      	adds	r7, #72	; 0x48
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	10908100 	.word	0x10908100

08002804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e040      	b.n	8002898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fd fef4 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fc0c 	bl	8003060 <UART_SetConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e022      	b.n	8002898 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fd36 	bl	80032cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800286e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800287e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fdbd 	bl	8003410 <UART_CheckIdleState>
 8002896:	4603      	mov	r3, r0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	f040 8082 	bne.w	80029be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_UART_Transmit+0x26>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07a      	b.n	80029c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_UART_Transmit+0x38>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e073      	b.n	80029c0 <HAL_UART_Transmit+0x120>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ee:	f7fe f89d 	bl	8000a2c <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x80>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002930:	e02d      	b.n	800298e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fdb0 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e039      	b.n	80029c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295e:	b292      	uxth	r2, r2
 8002960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3302      	adds	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e008      	b.n	800297c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b292      	uxth	r2, r2
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3301      	adds	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1cb      	bne.n	8002932 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2140      	movs	r1, #64	; 0x40
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fd7c 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e005      	b.n	80029c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d13d      	bne.n	8002a5a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_UART_Receive_IT+0x22>
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e036      	b.n	8002a5c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Receive_IT+0x34>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e02f      	b.n	8002a5c <HAL_UART_Receive_IT+0x94>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d018      	beq.n	8002a4a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	613b      	str	r3, [r7, #16]
   return(result);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	69f9      	ldr	r1, [r7, #28]
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e6      	bne.n	8002a18 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fdeb 	bl	800362c <UART_Start_Receive_IT>
 8002a56:	4603      	mov	r3, r0
 8002a58:	e000      	b.n	8002a5c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ba      	sub	sp, #232	; 0xe8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a92:	4013      	ands	r3, r2
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d115      	bne.n	8002acc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00f      	beq.n	8002acc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 82a3 	beq.w	8003008 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
      }
      return;
 8002aca:	e29d      	b.n	8003008 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8117 	beq.w	8002d04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ae6:	4b85      	ldr	r3, [pc, #532]	; (8002cfc <HAL_UART_IRQHandler+0x298>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 810a 	beq.w	8002d04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d011      	beq.n	8002b20 <HAL_UART_IRQHandler+0xbc>
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d011      	beq.n	8002b50 <HAL_UART_IRQHandler+0xec>
 8002b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d011      	beq.n	8002b80 <HAL_UART_IRQHandler+0x11c>
 8002b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d017      	beq.n	8002bbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	f043 0208 	orr.w	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <HAL_UART_IRQHandler+0x18a>
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8209 	beq.w	800300c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d04f      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fd9c 	bl	8003784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d141      	bne.n	8002cde <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3308      	adds	r3, #8
 8002c82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1d9      	bne.n	8002c5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d013      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <HAL_UART_IRQHandler+0x29c>)
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe f830 	bl	8000d20 <HAL_DMA_Abort_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d017      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e00f      	b.n	8002cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9ac 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	e00b      	b.n	8002cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f9a8 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e007      	b.n	8002cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9a4 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002cf4:	e18a      	b.n	800300c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf6:	bf00      	nop
    return;
 8002cf8:	e188      	b.n	800300c <HAL_UART_IRQHandler+0x5a8>
 8002cfa:	bf00      	nop
 8002cfc:	04000120 	.word	0x04000120
 8002d00:	0800384b 	.word	0x0800384b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	f040 8143 	bne.w	8002f94 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 813c 	beq.w	8002f94 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8135 	beq.w	8002f94 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	f040 80b1 	bne.w	8002ea4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 815c 	beq.w	8003010 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f080 8154 	bcs.w	8003010 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f000 8085 	beq.w	8002e88 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002db4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1da      	bne.n	8002d7e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3308      	adds	r3, #8
 8002de8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002df0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002df4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e1      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e3      	bne.n	8002e04 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e58:	f023 0310 	bic.w	r3, r3, #16
 8002e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e4      	bne.n	8002e48 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ff13 	bl	8000cae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8d3 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ea2:	e0b5      	b.n	8003010 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a7 	beq.w	8003014 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a2 	beq.w	8003014 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e4      	bne.n	8002ed0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	623b      	str	r3, [r7, #32]
   return(result);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e3      	bne.n	8002f06 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f023 0310 	bic.w	r3, r3, #16
 8002f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e4      	bne.n	8002f50 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f85b 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f92:	e03f      	b.n	8003014 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <HAL_UART_IRQHandler+0x55a>
 8002fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fde3 	bl	8003b82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fbc:	e02d      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01c      	beq.n	8003018 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    }
    return;
 8002fe6:	e017      	b.n	8003018 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_UART_IRQHandler+0x5b6>
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fc38 	bl	8003876 <UART_EndTransmit_IT>
    return;
 8003006:	e008      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003008:	bf00      	nop
 800300a:	e006      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
    return;
 800300c:	bf00      	nop
 800300e:	e004      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003010:	bf00      	nop
 8003012:	e002      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003018:	bf00      	nop
  }

}
 800301a:	37e8      	adds	r7, #232	; 0xe8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8a      	ldr	r3, [pc, #552]	; (80032b4 <UART_SetConfig+0x254>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a78      	ldr	r2, [pc, #480]	; (80032b8 <UART_SetConfig+0x258>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0xbe>
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <UART_SetConfig+0x25c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d817      	bhi.n	8003118 <UART_SetConfig+0xb8>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x90>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003113 	.word	0x08003113
 80030fc:	08003107 	.word	0x08003107
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e01d      	b.n	8003142 <UART_SetConfig+0xe2>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e01a      	b.n	8003142 <UART_SetConfig+0xe2>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e017      	b.n	8003142 <UART_SetConfig+0xe2>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e014      	b.n	8003142 <UART_SetConfig+0xe2>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e011      	b.n	8003142 <UART_SetConfig+0xe2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x260>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d102      	bne.n	800312e <UART_SetConfig+0xce>
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0xe2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <UART_SetConfig+0x264>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <UART_SetConfig+0xde>
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e001      	b.n	8003142 <UART_SetConfig+0xe2>
 800313e:	2310      	movs	r3, #16
 8003140:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314a:	d15b      	bne.n	8003204 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800314c:	7ffb      	ldrb	r3, [r7, #31]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d827      	bhi.n	80031a2 <UART_SetConfig+0x142>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0xf8>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7ff f9c8 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8003180:	61b8      	str	r0, [r7, #24]
        break;
 8003182:	e013      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7ff f9e6 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003188:	61b8      	str	r0, [r7, #24]
        break;
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <UART_SetConfig+0x268>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e00c      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7ff f947 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8003196:	61b8      	str	r0, [r7, #24]
        break;
 8003198:	e008      	b.n	80031ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e004      	b.n	80031ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77bb      	strb	r3, [r7, #30]
        break;
 80031aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d074      	beq.n	800329c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	005a      	lsls	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d916      	bls.n	80031fe <UART_SetConfig+0x19e>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d212      	bcs.n	80031fe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f023 030f 	bic.w	r3, r3, #15
 80031e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	89fa      	ldrh	r2, [r7, #14]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e04e      	b.n	800329c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	77bb      	strb	r3, [r7, #30]
 8003202:	e04b      	b.n	800329c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d827      	bhi.n	800325a <UART_SetConfig+0x1fa>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <UART_SetConfig+0x1b0>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003235 	.word	0x08003235
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003245 	.word	0x08003245
 800321c:	0800325b 	.word	0x0800325b
 8003220:	0800324b 	.word	0x0800324b
 8003224:	0800325b 	.word	0x0800325b
 8003228:	0800325b 	.word	0x0800325b
 800322c:	0800325b 	.word	0x0800325b
 8003230:	08003253 	.word	0x08003253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7ff f96c 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8003238:	61b8      	str	r0, [r7, #24]
        break;
 800323a:	e013      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7ff f98a 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003240:	61b8      	str	r0, [r7, #24]
        break;
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <UART_SetConfig+0x268>)
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e00c      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7ff f8eb 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800324e:	61b8      	str	r0, [r7, #24]
        break;
 8003250:	e008      	b.n	8003264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e004      	b.n	8003264 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	77bb      	strb	r3, [r7, #30]
        break;
 8003262:	bf00      	nop
    }

    if (pclk != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	085a      	lsrs	r2, r3, #1
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	b29b      	uxth	r3, r3
 800327e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d908      	bls.n	8003298 <UART_SetConfig+0x238>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d204      	bcs.n	8003298 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e001      	b.n	800329c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	efff69f3 	.word	0xefff69f3
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40004800 	.word	0x40004800
 80032c8:	007a1200 	.word	0x007a1200

080032cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d10a      	bne.n	80033e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003420:	f7fd fb04 	bl	8000a2c <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10e      	bne.n	8003452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f82d 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e023      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d10e      	bne.n	800347e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f817 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00d      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b09c      	sub	sp, #112	; 0x70
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	e0a5      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	f000 80a1 	beq.w	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fd fab5 	bl	8000a2c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80034ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13e      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3308      	adds	r3, #8
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003526:	64ba      	str	r2, [r7, #72]	; 0x48
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800352c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e067      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d04f      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d147      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003578:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
 800359a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800359e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a0:	e841 2300 	strex	r3, r2, [r1]
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e6      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	613b      	str	r3, [r7, #16]
   return(result);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035cc:	623a      	str	r2, [r7, #32]
 80035ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e010      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	f43f af4a 	beq.w	80034b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3770      	adds	r7, #112	; 0x70
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b091      	sub	sp, #68	; 0x44
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d10e      	bne.n	800367e <UART_Start_Receive_IT+0x52>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <UART_Start_Receive_IT+0x48>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800366e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003672:	e02d      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800367c:	e028      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <UART_Start_Receive_IT+0x76>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <UART_Start_Receive_IT+0x6c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003696:	e01b      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	227f      	movs	r2, #127	; 0x7f
 800369c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a0:	e016      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036aa:	d10d      	bne.n	80036c8 <UART_Start_Receive_IT+0x9c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <UART_Start_Receive_IT+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	227f      	movs	r2, #127	; 0x7f
 80036b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036bc:	e008      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	223f      	movs	r2, #63	; 0x3f
 80036c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c6:	e003      	b.n	80036d0 <UART_Start_Receive_IT+0xa4>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2222      	movs	r2, #34	; 0x22
 80036dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3308      	adds	r3, #8
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e5      	bne.n	80036de <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	d107      	bne.n	800372c <UART_Start_Receive_IT+0x100>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d103      	bne.n	800372c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a15      	ldr	r2, [pc, #84]	; (800377c <UART_Start_Receive_IT+0x150>)
 8003728:	665a      	str	r2, [r3, #100]	; 0x64
 800372a:	e002      	b.n	8003732 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <UART_Start_Receive_IT+0x154>)
 8003730:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	613b      	str	r3, [r7, #16]
   return(result);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	69f9      	ldr	r1, [r7, #28]
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	61bb      	str	r3, [r7, #24]
   return(result);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e6      	bne.n	800373a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3744      	adds	r7, #68	; 0x44
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	08003a27 	.word	0x08003a27
 8003780:	080038cb 	.word	0x080038cb

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b095      	sub	sp, #84	; 0x54
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
 80037ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e6      	bne.n	800378c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e5      	bne.n	80037be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d118      	bne.n	800382c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	60bb      	str	r3, [r7, #8]
   return(result);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	613b      	str	r3, [r7, #16]
   return(result);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e6      	bne.n	80037fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800383e:	bf00      	nop
 8003840:	3754      	adds	r7, #84	; 0x54
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fbe3 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b088      	sub	sp, #32
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60bb      	str	r3, [r7, #8]
   return(result);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	613b      	str	r3, [r7, #16]
   return(result);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e6      	bne.n	800387e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fbaf 	bl	8003020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b096      	sub	sp, #88	; 0x58
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e0:	2b22      	cmp	r3, #34	; 0x22
 80038e2:	f040 8094 	bne.w	8003a0e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038f4:	b2d9      	uxtb	r1, r3
 80038f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	400a      	ands	r2, r1
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d177      	bne.n	8003a1e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003942:	653b      	str	r3, [r7, #80]	; 0x50
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
 800394e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e6      	bne.n	800392e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	623b      	str	r3, [r7, #32]
   return(result);
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003980:	633a      	str	r2, [r7, #48]	; 0x30
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d12e      	bne.n	8003a06 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	617b      	str	r3, [r7, #20]
   return(result);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e6      	bne.n	80039ae <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d103      	bne.n	80039f6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fb22 	bl	8003048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a04:	e00b      	b.n	8003a1e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fc fc32 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 8003a0c:	e007      	b.n	8003a1e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0208 	orr.w	r2, r2, #8
 8003a1c:	619a      	str	r2, [r3, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	3758      	adds	r7, #88	; 0x58
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b096      	sub	sp, #88	; 0x58
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3c:	2b22      	cmp	r3, #34	; 0x22
 8003a3e:	f040 8094 	bne.w	8003b6a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a48:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a52:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003a56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d177      	bne.n	8003b7a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8003aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e5      	bne.n	8003abc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d12e      	bne.n	8003b62 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0310 	bic.w	r3, r3, #16
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6979      	ldr	r1, [r7, #20]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	613b      	str	r3, [r7, #16]
   return(result);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d103      	bne.n	8003b52 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2210      	movs	r2, #16
 8003b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fa74 	bl	8003048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b60:	e00b      	b.n	8003b7a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fc fb84 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 8003b68:	e007      	b.n	8003b7a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0208 	orr.w	r2, r2, #8
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	3758      	adds	r7, #88	; 0x58
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	; (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	; (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	; (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f001 f8ba 	bl	8004d30 <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08004ec8 	.word	0x08004ec8
 8003be0:	08004ec8 	.word	0x08004ec8
 8003be4:	08004ec8 	.word	0x08004ec8
 8003be8:	08004ecc 	.word	0x08004ecc

08003bec <memset>:
 8003bec:	4402      	add	r2, r0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <srand>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <srand+0x44>)
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c04:	4604      	mov	r4, r0
 8003c06:	b9b3      	cbnz	r3, 8003c36 <srand+0x3a>
 8003c08:	2018      	movs	r0, #24
 8003c0a:	f000 f8bf 	bl	8003d8c <malloc>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	63a8      	str	r0, [r5, #56]	; 0x38
 8003c12:	b920      	cbnz	r0, 8003c1e <srand+0x22>
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <srand+0x48>)
 8003c16:	480c      	ldr	r0, [pc, #48]	; (8003c48 <srand+0x4c>)
 8003c18:	2142      	movs	r1, #66	; 0x42
 8003c1a:	f000 f875 	bl	8003d08 <__assert_func>
 8003c1e:	490b      	ldr	r1, [pc, #44]	; (8003c4c <srand+0x50>)
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <srand+0x54>)
 8003c22:	e9c0 1300 	strd	r1, r3, [r0]
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <srand+0x58>)
 8003c28:	6083      	str	r3, [r0, #8]
 8003c2a:	230b      	movs	r3, #11
 8003c2c:	8183      	strh	r3, [r0, #12]
 8003c2e:	2100      	movs	r1, #0
 8003c30:	2001      	movs	r0, #1
 8003c32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	611c      	str	r4, [r3, #16]
 8003c3c:	615a      	str	r2, [r3, #20]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	08004d84 	.word	0x08004d84
 8003c48:	08004d9b 	.word	0x08004d9b
 8003c4c:	abcd330e 	.word	0xabcd330e
 8003c50:	e66d1234 	.word	0xe66d1234
 8003c54:	0005deec 	.word	0x0005deec

08003c58 <rand>:
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <rand+0x5c>)
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	681c      	ldr	r4, [r3, #0]
 8003c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c60:	b9b3      	cbnz	r3, 8003c90 <rand+0x38>
 8003c62:	2018      	movs	r0, #24
 8003c64:	f000 f892 	bl	8003d8c <malloc>
 8003c68:	63a0      	str	r0, [r4, #56]	; 0x38
 8003c6a:	b928      	cbnz	r0, 8003c78 <rand+0x20>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <rand+0x60>)
 8003c70:	4812      	ldr	r0, [pc, #72]	; (8003cbc <rand+0x64>)
 8003c72:	214e      	movs	r1, #78	; 0x4e
 8003c74:	f000 f848 	bl	8003d08 <__assert_func>
 8003c78:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <rand+0x68>)
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <rand+0x6c>)
 8003c7c:	e9c0 2300 	strd	r2, r3, [r0]
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <rand+0x70>)
 8003c82:	6083      	str	r3, [r0, #8]
 8003c84:	230b      	movs	r3, #11
 8003c86:	8183      	strh	r3, [r0, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <rand+0x74>)
 8003c94:	6920      	ldr	r0, [r4, #16]
 8003c96:	6963      	ldr	r3, [r4, #20]
 8003c98:	490d      	ldr	r1, [pc, #52]	; (8003cd0 <rand+0x78>)
 8003c9a:	4342      	muls	r2, r0
 8003c9c:	fb01 2203 	mla	r2, r1, r3, r2
 8003ca0:	fba0 0101 	umull	r0, r1, r0, r1
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	eb42 0001 	adc.w	r0, r2, r1
 8003caa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003cae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cb2:	bd10      	pop	{r4, pc}
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	08004d84 	.word	0x08004d84
 8003cbc:	08004d9b 	.word	0x08004d9b
 8003cc0:	abcd330e 	.word	0xabcd330e
 8003cc4:	e66d1234 	.word	0xe66d1234
 8003cc8:	0005deec 	.word	0x0005deec
 8003ccc:	5851f42d 	.word	0x5851f42d
 8003cd0:	4c957f2d 	.word	0x4c957f2d

08003cd4 <time>:
 8003cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <time+0x30>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4669      	mov	r1, sp
 8003cdc:	4604      	mov	r4, r0
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	f000 f842 	bl	8003d68 <_gettimeofday_r>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bfbe      	ittt	lt
 8003ce8:	f04f 32ff 	movlt.w	r2, #4294967295
 8003cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cf0:	e9cd 2300 	strdlt	r2, r3, [sp]
 8003cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cf8:	b10c      	cbz	r4, 8003cfe <time+0x2a>
 8003cfa:	e9c4 0100 	strd	r0, r1, [r4]
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c

08003d08 <__assert_func>:
 8003d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <__assert_func+0x2c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4605      	mov	r5, r0
 8003d14:	68d8      	ldr	r0, [r3, #12]
 8003d16:	b14c      	cbz	r4, 8003d2c <__assert_func+0x24>
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <__assert_func+0x30>)
 8003d1a:	9100      	str	r1, [sp, #0]
 8003d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d20:	4906      	ldr	r1, [pc, #24]	; (8003d3c <__assert_func+0x34>)
 8003d22:	462b      	mov	r3, r5
 8003d24:	f000 f80e 	bl	8003d44 <fiprintf>
 8003d28:	f000 fcd6 	bl	80046d8 <abort>
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <__assert_func+0x38>)
 8003d2e:	461c      	mov	r4, r3
 8003d30:	e7f3      	b.n	8003d1a <__assert_func+0x12>
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	08004df6 	.word	0x08004df6
 8003d3c:	08004e03 	.word	0x08004e03
 8003d40:	08004e31 	.word	0x08004e31

08003d44 <fiprintf>:
 8003d44:	b40e      	push	{r1, r2, r3}
 8003d46:	b503      	push	{r0, r1, lr}
 8003d48:	4601      	mov	r1, r0
 8003d4a:	ab03      	add	r3, sp, #12
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <fiprintf+0x20>)
 8003d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d52:	6800      	ldr	r0, [r0, #0]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	f000 f92b 	bl	8003fb0 <_vfiprintf_r>
 8003d5a:	b002      	add	sp, #8
 8003d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d60:	b003      	add	sp, #12
 8003d62:	4770      	bx	lr
 8003d64:	2000000c 	.word	0x2000000c

08003d68 <_gettimeofday_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d07      	ldr	r5, [pc, #28]	; (8003d88 <_gettimeofday_r+0x20>)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	f000 ffd3 	bl	8004d20 <_gettimeofday>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d102      	bne.n	8003d84 <_gettimeofday_r+0x1c>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	b103      	cbz	r3, 8003d84 <_gettimeofday_r+0x1c>
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
 8003d86:	bf00      	nop
 8003d88:	200001b8 	.word	0x200001b8

08003d8c <malloc>:
 8003d8c:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <malloc+0xc>)
 8003d8e:	4601      	mov	r1, r0
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	f000 b86f 	b.w	8003e74 <_malloc_r>
 8003d96:	bf00      	nop
 8003d98:	2000000c 	.word	0x2000000c

08003d9c <_free_r>:
 8003d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	d044      	beq.n	8003e2c <_free_r+0x90>
 8003da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da6:	9001      	str	r0, [sp, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f1a1 0404 	sub.w	r4, r1, #4
 8003dae:	bfb8      	it	lt
 8003db0:	18e4      	addlt	r4, r4, r3
 8003db2:	f000 feb9 	bl	8004b28 <__malloc_lock>
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <_free_r+0x94>)
 8003db8:	9801      	ldr	r0, [sp, #4]
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	b933      	cbnz	r3, 8003dcc <_free_r+0x30>
 8003dbe:	6063      	str	r3, [r4, #4]
 8003dc0:	6014      	str	r4, [r2, #0]
 8003dc2:	b003      	add	sp, #12
 8003dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dc8:	f000 beb4 	b.w	8004b34 <__malloc_unlock>
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d908      	bls.n	8003de2 <_free_r+0x46>
 8003dd0:	6825      	ldr	r5, [r4, #0]
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf01      	itttt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	1949      	addeq	r1, r1, r5
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	e7ed      	b.n	8003dbe <_free_r+0x22>
 8003de2:	461a      	mov	r2, r3
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	b10b      	cbz	r3, 8003dec <_free_r+0x50>
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d9fa      	bls.n	8003de2 <_free_r+0x46>
 8003dec:	6811      	ldr	r1, [r2, #0]
 8003dee:	1855      	adds	r5, r2, r1
 8003df0:	42a5      	cmp	r5, r4
 8003df2:	d10b      	bne.n	8003e0c <_free_r+0x70>
 8003df4:	6824      	ldr	r4, [r4, #0]
 8003df6:	4421      	add	r1, r4
 8003df8:	1854      	adds	r4, r2, r1
 8003dfa:	42a3      	cmp	r3, r4
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	d1e0      	bne.n	8003dc2 <_free_r+0x26>
 8003e00:	681c      	ldr	r4, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	6053      	str	r3, [r2, #4]
 8003e06:	4421      	add	r1, r4
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	e7da      	b.n	8003dc2 <_free_r+0x26>
 8003e0c:	d902      	bls.n	8003e14 <_free_r+0x78>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	6003      	str	r3, [r0, #0]
 8003e12:	e7d6      	b.n	8003dc2 <_free_r+0x26>
 8003e14:	6825      	ldr	r5, [r4, #0]
 8003e16:	1961      	adds	r1, r4, r5
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	bf04      	itt	eq
 8003e1c:	6819      	ldreq	r1, [r3, #0]
 8003e1e:	685b      	ldreq	r3, [r3, #4]
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	bf04      	itt	eq
 8003e24:	1949      	addeq	r1, r1, r5
 8003e26:	6021      	streq	r1, [r4, #0]
 8003e28:	6054      	str	r4, [r2, #4]
 8003e2a:	e7ca      	b.n	8003dc2 <_free_r+0x26>
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd30      	pop	{r4, r5, pc}
 8003e30:	200001b0 	.word	0x200001b0

08003e34 <sbrk_aligned>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4e0e      	ldr	r6, [pc, #56]	; (8003e70 <sbrk_aligned+0x3c>)
 8003e38:	460c      	mov	r4, r1
 8003e3a:	6831      	ldr	r1, [r6, #0]
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	b911      	cbnz	r1, 8003e46 <sbrk_aligned+0x12>
 8003e40:	f000 fb7a 	bl	8004538 <_sbrk_r>
 8003e44:	6030      	str	r0, [r6, #0]
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 fb75 	bl	8004538 <_sbrk_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <sbrk_aligned+0x34>
 8003e52:	1cc4      	adds	r4, r0, #3
 8003e54:	f024 0403 	bic.w	r4, r4, #3
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d007      	beq.n	8003e6c <sbrk_aligned+0x38>
 8003e5c:	1a21      	subs	r1, r4, r0
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fb6a 	bl	8004538 <_sbrk_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d101      	bne.n	8003e6c <sbrk_aligned+0x38>
 8003e68:	f04f 34ff 	mov.w	r4, #4294967295
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	200001b4 	.word	0x200001b4

08003e74 <_malloc_r>:
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e78:	1ccd      	adds	r5, r1, #3
 8003e7a:	f025 0503 	bic.w	r5, r5, #3
 8003e7e:	3508      	adds	r5, #8
 8003e80:	2d0c      	cmp	r5, #12
 8003e82:	bf38      	it	cc
 8003e84:	250c      	movcc	r5, #12
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	4607      	mov	r7, r0
 8003e8a:	db01      	blt.n	8003e90 <_malloc_r+0x1c>
 8003e8c:	42a9      	cmp	r1, r5
 8003e8e:	d905      	bls.n	8003e9c <_malloc_r+0x28>
 8003e90:	230c      	movs	r3, #12
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	2600      	movs	r6, #0
 8003e96:	4630      	mov	r0, r6
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	4e2e      	ldr	r6, [pc, #184]	; (8003f58 <_malloc_r+0xe4>)
 8003e9e:	f000 fe43 	bl	8004b28 <__malloc_lock>
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	461c      	mov	r4, r3
 8003ea6:	bb34      	cbnz	r4, 8003ef6 <_malloc_r+0x82>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f7ff ffc2 	bl	8003e34 <sbrk_aligned>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	d14d      	bne.n	8003f52 <_malloc_r+0xde>
 8003eb6:	6834      	ldr	r4, [r6, #0]
 8003eb8:	4626      	mov	r6, r4
 8003eba:	2e00      	cmp	r6, #0
 8003ebc:	d140      	bne.n	8003f40 <_malloc_r+0xcc>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	eb04 0803 	add.w	r8, r4, r3
 8003ec8:	f000 fb36 	bl	8004538 <_sbrk_r>
 8003ecc:	4580      	cmp	r8, r0
 8003ece:	d13a      	bne.n	8003f46 <_malloc_r+0xd2>
 8003ed0:	6821      	ldr	r1, [r4, #0]
 8003ed2:	3503      	adds	r5, #3
 8003ed4:	1a6d      	subs	r5, r5, r1
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ffa5 	bl	8003e34 <sbrk_aligned>
 8003eea:	3001      	adds	r0, #1
 8003eec:	d02b      	beq.n	8003f46 <_malloc_r+0xd2>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	442b      	add	r3, r5
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e00e      	b.n	8003f14 <_malloc_r+0xa0>
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	d41e      	bmi.n	8003f3a <_malloc_r+0xc6>
 8003efc:	2a0b      	cmp	r2, #11
 8003efe:	d916      	bls.n	8003f2e <_malloc_r+0xba>
 8003f00:	1961      	adds	r1, r4, r5
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	6025      	str	r5, [r4, #0]
 8003f06:	bf18      	it	ne
 8003f08:	6059      	strne	r1, [r3, #4]
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	bf08      	it	eq
 8003f0e:	6031      	streq	r1, [r6, #0]
 8003f10:	5162      	str	r2, [r4, r5]
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	4638      	mov	r0, r7
 8003f16:	f104 060b 	add.w	r6, r4, #11
 8003f1a:	f000 fe0b 	bl	8004b34 <__malloc_unlock>
 8003f1e:	f026 0607 	bic.w	r6, r6, #7
 8003f22:	1d23      	adds	r3, r4, #4
 8003f24:	1af2      	subs	r2, r6, r3
 8003f26:	d0b6      	beq.n	8003e96 <_malloc_r+0x22>
 8003f28:	1b9b      	subs	r3, r3, r6
 8003f2a:	50a3      	str	r3, [r4, r2]
 8003f2c:	e7b3      	b.n	8003e96 <_malloc_r+0x22>
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	bf0c      	ite	eq
 8003f34:	6032      	streq	r2, [r6, #0]
 8003f36:	605a      	strne	r2, [r3, #4]
 8003f38:	e7ec      	b.n	8003f14 <_malloc_r+0xa0>
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	6864      	ldr	r4, [r4, #4]
 8003f3e:	e7b2      	b.n	8003ea6 <_malloc_r+0x32>
 8003f40:	4634      	mov	r4, r6
 8003f42:	6876      	ldr	r6, [r6, #4]
 8003f44:	e7b9      	b.n	8003eba <_malloc_r+0x46>
 8003f46:	230c      	movs	r3, #12
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f000 fdf2 	bl	8004b34 <__malloc_unlock>
 8003f50:	e7a1      	b.n	8003e96 <_malloc_r+0x22>
 8003f52:	6025      	str	r5, [r4, #0]
 8003f54:	e7de      	b.n	8003f14 <_malloc_r+0xa0>
 8003f56:	bf00      	nop
 8003f58:	200001b0 	.word	0x200001b0

08003f5c <__sfputc_r>:
 8003f5c:	6893      	ldr	r3, [r2, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	b410      	push	{r4}
 8003f64:	6093      	str	r3, [r2, #8]
 8003f66:	da08      	bge.n	8003f7a <__sfputc_r+0x1e>
 8003f68:	6994      	ldr	r4, [r2, #24]
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	db01      	blt.n	8003f72 <__sfputc_r+0x16>
 8003f6e:	290a      	cmp	r1, #10
 8003f70:	d103      	bne.n	8003f7a <__sfputc_r+0x1e>
 8003f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f76:	f000 baef 	b.w	8004558 <__swbuf_r>
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	1c58      	adds	r0, r3, #1
 8003f7e:	6010      	str	r0, [r2, #0]
 8003f80:	7019      	strb	r1, [r3, #0]
 8003f82:	4608      	mov	r0, r1
 8003f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <__sfputs_r>:
 8003f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	460f      	mov	r7, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	18d5      	adds	r5, r2, r3
 8003f94:	42ac      	cmp	r4, r5
 8003f96:	d101      	bne.n	8003f9c <__sfputs_r+0x12>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e007      	b.n	8003fac <__sfputs_r+0x22>
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	463a      	mov	r2, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff ffda 	bl	8003f5c <__sfputc_r>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d1f3      	bne.n	8003f94 <__sfputs_r+0xa>
 8003fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fb0 <_vfiprintf_r>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	b09d      	sub	sp, #116	; 0x74
 8003fb8:	4614      	mov	r4, r2
 8003fba:	4698      	mov	r8, r3
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	b118      	cbz	r0, 8003fc8 <_vfiprintf_r+0x18>
 8003fc0:	6983      	ldr	r3, [r0, #24]
 8003fc2:	b90b      	cbnz	r3, 8003fc8 <_vfiprintf_r+0x18>
 8003fc4:	f000 fcaa 	bl	800491c <__sinit>
 8003fc8:	4b89      	ldr	r3, [pc, #548]	; (80041f0 <_vfiprintf_r+0x240>)
 8003fca:	429d      	cmp	r5, r3
 8003fcc:	d11b      	bne.n	8004006 <_vfiprintf_r+0x56>
 8003fce:	6875      	ldr	r5, [r6, #4]
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x32>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x32>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fde:	f000 fd3b 	bl	8004a58 <__retarget_lock_acquire_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	d501      	bpl.n	8003fec <_vfiprintf_r+0x3c>
 8003fe8:	692b      	ldr	r3, [r5, #16]
 8003fea:	b9eb      	cbnz	r3, 8004028 <_vfiprintf_r+0x78>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 fb04 	bl	80045fc <__swsetup_r>
 8003ff4:	b1c0      	cbz	r0, 8004028 <_vfiprintf_r+0x78>
 8003ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff8:	07dc      	lsls	r4, r3, #31
 8003ffa:	d50e      	bpl.n	800401a <_vfiprintf_r+0x6a>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	b01d      	add	sp, #116	; 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <_vfiprintf_r+0x244>)
 8004008:	429d      	cmp	r5, r3
 800400a:	d101      	bne.n	8004010 <_vfiprintf_r+0x60>
 800400c:	68b5      	ldr	r5, [r6, #8]
 800400e:	e7df      	b.n	8003fd0 <_vfiprintf_r+0x20>
 8004010:	4b79      	ldr	r3, [pc, #484]	; (80041f8 <_vfiprintf_r+0x248>)
 8004012:	429d      	cmp	r5, r3
 8004014:	bf08      	it	eq
 8004016:	68f5      	ldreq	r5, [r6, #12]
 8004018:	e7da      	b.n	8003fd0 <_vfiprintf_r+0x20>
 800401a:	89ab      	ldrh	r3, [r5, #12]
 800401c:	0598      	lsls	r0, r3, #22
 800401e:	d4ed      	bmi.n	8003ffc <_vfiprintf_r+0x4c>
 8004020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004022:	f000 fd1a 	bl	8004a5a <__retarget_lock_release_recursive>
 8004026:	e7e9      	b.n	8003ffc <_vfiprintf_r+0x4c>
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	2320      	movs	r3, #32
 800402e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004032:	f8cd 800c 	str.w	r8, [sp, #12]
 8004036:	2330      	movs	r3, #48	; 0x30
 8004038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041fc <_vfiprintf_r+0x24c>
 800403c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004040:	f04f 0901 	mov.w	r9, #1
 8004044:	4623      	mov	r3, r4
 8004046:	469a      	mov	sl, r3
 8004048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404c:	b10a      	cbz	r2, 8004052 <_vfiprintf_r+0xa2>
 800404e:	2a25      	cmp	r2, #37	; 0x25
 8004050:	d1f9      	bne.n	8004046 <_vfiprintf_r+0x96>
 8004052:	ebba 0b04 	subs.w	fp, sl, r4
 8004056:	d00b      	beq.n	8004070 <_vfiprintf_r+0xc0>
 8004058:	465b      	mov	r3, fp
 800405a:	4622      	mov	r2, r4
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff ff93 	bl	8003f8a <__sfputs_r>
 8004064:	3001      	adds	r0, #1
 8004066:	f000 80aa 	beq.w	80041be <_vfiprintf_r+0x20e>
 800406a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406c:	445a      	add	r2, fp
 800406e:	9209      	str	r2, [sp, #36]	; 0x24
 8004070:	f89a 3000 	ldrb.w	r3, [sl]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a2 	beq.w	80041be <_vfiprintf_r+0x20e>
 800407a:	2300      	movs	r3, #0
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004084:	f10a 0a01 	add.w	sl, sl, #1
 8004088:	9304      	str	r3, [sp, #16]
 800408a:	9307      	str	r3, [sp, #28]
 800408c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004090:	931a      	str	r3, [sp, #104]	; 0x68
 8004092:	4654      	mov	r4, sl
 8004094:	2205      	movs	r2, #5
 8004096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409a:	4858      	ldr	r0, [pc, #352]	; (80041fc <_vfiprintf_r+0x24c>)
 800409c:	f7fc f898 	bl	80001d0 <memchr>
 80040a0:	9a04      	ldr	r2, [sp, #16]
 80040a2:	b9d8      	cbnz	r0, 80040dc <_vfiprintf_r+0x12c>
 80040a4:	06d1      	lsls	r1, r2, #27
 80040a6:	bf44      	itt	mi
 80040a8:	2320      	movmi	r3, #32
 80040aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ae:	0713      	lsls	r3, r2, #28
 80040b0:	bf44      	itt	mi
 80040b2:	232b      	movmi	r3, #43	; 0x2b
 80040b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b8:	f89a 3000 	ldrb.w	r3, [sl]
 80040bc:	2b2a      	cmp	r3, #42	; 0x2a
 80040be:	d015      	beq.n	80040ec <_vfiprintf_r+0x13c>
 80040c0:	9a07      	ldr	r2, [sp, #28]
 80040c2:	4654      	mov	r4, sl
 80040c4:	2000      	movs	r0, #0
 80040c6:	f04f 0c0a 	mov.w	ip, #10
 80040ca:	4621      	mov	r1, r4
 80040cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d0:	3b30      	subs	r3, #48	; 0x30
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	d94e      	bls.n	8004174 <_vfiprintf_r+0x1c4>
 80040d6:	b1b0      	cbz	r0, 8004106 <_vfiprintf_r+0x156>
 80040d8:	9207      	str	r2, [sp, #28]
 80040da:	e014      	b.n	8004106 <_vfiprintf_r+0x156>
 80040dc:	eba0 0308 	sub.w	r3, r0, r8
 80040e0:	fa09 f303 	lsl.w	r3, r9, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	9304      	str	r3, [sp, #16]
 80040e8:	46a2      	mov	sl, r4
 80040ea:	e7d2      	b.n	8004092 <_vfiprintf_r+0xe2>
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	1d19      	adds	r1, r3, #4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	9103      	str	r1, [sp, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bfbb      	ittet	lt
 80040f8:	425b      	neglt	r3, r3
 80040fa:	f042 0202 	orrlt.w	r2, r2, #2
 80040fe:	9307      	strge	r3, [sp, #28]
 8004100:	9307      	strlt	r3, [sp, #28]
 8004102:	bfb8      	it	lt
 8004104:	9204      	strlt	r2, [sp, #16]
 8004106:	7823      	ldrb	r3, [r4, #0]
 8004108:	2b2e      	cmp	r3, #46	; 0x2e
 800410a:	d10c      	bne.n	8004126 <_vfiprintf_r+0x176>
 800410c:	7863      	ldrb	r3, [r4, #1]
 800410e:	2b2a      	cmp	r3, #42	; 0x2a
 8004110:	d135      	bne.n	800417e <_vfiprintf_r+0x1ce>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9203      	str	r2, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004122:	3402      	adds	r4, #2
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800420c <_vfiprintf_r+0x25c>
 800412a:	7821      	ldrb	r1, [r4, #0]
 800412c:	2203      	movs	r2, #3
 800412e:	4650      	mov	r0, sl
 8004130:	f7fc f84e 	bl	80001d0 <memchr>
 8004134:	b140      	cbz	r0, 8004148 <_vfiprintf_r+0x198>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	eba0 000a 	sub.w	r0, r0, sl
 800413c:	fa03 f000 	lsl.w	r0, r3, r0
 8004140:	9b04      	ldr	r3, [sp, #16]
 8004142:	4303      	orrs	r3, r0
 8004144:	3401      	adds	r4, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	482c      	ldr	r0, [pc, #176]	; (8004200 <_vfiprintf_r+0x250>)
 800414e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004152:	2206      	movs	r2, #6
 8004154:	f7fc f83c 	bl	80001d0 <memchr>
 8004158:	2800      	cmp	r0, #0
 800415a:	d03f      	beq.n	80041dc <_vfiprintf_r+0x22c>
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <_vfiprintf_r+0x254>)
 800415e:	bb1b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x1f8>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	3307      	adds	r3, #7
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	3308      	adds	r3, #8
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	443b      	add	r3, r7
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	e767      	b.n	8004044 <_vfiprintf_r+0x94>
 8004174:	fb0c 3202 	mla	r2, ip, r2, r3
 8004178:	460c      	mov	r4, r1
 800417a:	2001      	movs	r0, #1
 800417c:	e7a5      	b.n	80040ca <_vfiprintf_r+0x11a>
 800417e:	2300      	movs	r3, #0
 8004180:	3401      	adds	r4, #1
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4620      	mov	r0, r4
 800418c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004190:	3a30      	subs	r2, #48	; 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d903      	bls.n	800419e <_vfiprintf_r+0x1ee>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c5      	beq.n	8004126 <_vfiprintf_r+0x176>
 800419a:	9105      	str	r1, [sp, #20]
 800419c:	e7c3      	b.n	8004126 <_vfiprintf_r+0x176>
 800419e:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a2:	4604      	mov	r4, r0
 80041a4:	2301      	movs	r3, #1
 80041a6:	e7f0      	b.n	800418a <_vfiprintf_r+0x1da>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462a      	mov	r2, r5
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <_vfiprintf_r+0x258>)
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	4630      	mov	r0, r6
 80041b4:	f3af 8000 	nop.w
 80041b8:	4607      	mov	r7, r0
 80041ba:	1c78      	adds	r0, r7, #1
 80041bc:	d1d6      	bne.n	800416c <_vfiprintf_r+0x1bc>
 80041be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041c0:	07d9      	lsls	r1, r3, #31
 80041c2:	d405      	bmi.n	80041d0 <_vfiprintf_r+0x220>
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	059a      	lsls	r2, r3, #22
 80041c8:	d402      	bmi.n	80041d0 <_vfiprintf_r+0x220>
 80041ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041cc:	f000 fc45 	bl	8004a5a <__retarget_lock_release_recursive>
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	065b      	lsls	r3, r3, #25
 80041d4:	f53f af12 	bmi.w	8003ffc <_vfiprintf_r+0x4c>
 80041d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041da:	e711      	b.n	8004000 <_vfiprintf_r+0x50>
 80041dc:	ab03      	add	r3, sp, #12
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	462a      	mov	r2, r5
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <_vfiprintf_r+0x258>)
 80041e4:	a904      	add	r1, sp, #16
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f880 	bl	80042ec <_printf_i>
 80041ec:	e7e4      	b.n	80041b8 <_vfiprintf_r+0x208>
 80041ee:	bf00      	nop
 80041f0:	08004e88 	.word	0x08004e88
 80041f4:	08004ea8 	.word	0x08004ea8
 80041f8:	08004e68 	.word	0x08004e68
 80041fc:	08004e32 	.word	0x08004e32
 8004200:	08004e3c 	.word	0x08004e3c
 8004204:	00000000 	.word	0x00000000
 8004208:	08003f8b 	.word	0x08003f8b
 800420c:	08004e38 	.word	0x08004e38

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4699      	mov	r9, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004220:	4293      	cmp	r3, r2
 8004222:	bfb8      	it	lt
 8004224:	4613      	movlt	r3, r2
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800422c:	4607      	mov	r7, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc26      	bgt.n	80042a6 <_printf_common+0x96>
 8004258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800425c:	1e13      	subs	r3, r2, #0
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d42b      	bmi.n	80042c0 <_printf_common+0xb0>
 8004268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426c:	4649      	mov	r1, r9
 800426e:	4638      	mov	r0, r7
 8004270:	47c0      	blx	r8
 8004272:	3001      	adds	r0, #1
 8004274:	d01e      	beq.n	80042b4 <_printf_common+0xa4>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	68e5      	ldr	r5, [r4, #12]
 800427a:	6832      	ldr	r2, [r6, #0]
 800427c:	f003 0306 	and.w	r3, r3, #6
 8004280:	2b04      	cmp	r3, #4
 8004282:	bf08      	it	eq
 8004284:	1aad      	subeq	r5, r5, r2
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	6922      	ldr	r2, [r4, #16]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	2600      	movs	r6, #0
 800429c:	341a      	adds	r4, #26
 800429e:	42b5      	cmp	r5, r6
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xc8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xa8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4649      	mov	r1, r9
 80042ac:	4638      	mov	r0, r7
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xac>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c6      	b.n	800424e <_printf_common+0x3e>
 80042c0:	18e1      	adds	r1, r4, r3
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	2030      	movs	r0, #48	; 0x30
 80042c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ca:	4422      	add	r2, r4
 80042cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d4:	3302      	adds	r3, #2
 80042d6:	e7c7      	b.n	8004268 <_printf_common+0x58>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4649      	mov	r1, r9
 80042de:	4638      	mov	r0, r7
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xa4>
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7d9      	b.n	800429e <_printf_common+0x8e>
	...

080042ec <_printf_i>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	7e0f      	ldrb	r7, [r1, #24]
 80042f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042f4:	2f78      	cmp	r7, #120	; 0x78
 80042f6:	4691      	mov	r9, r2
 80042f8:	4680      	mov	r8, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	469a      	mov	sl, r3
 80042fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004302:	d807      	bhi.n	8004314 <_printf_i+0x28>
 8004304:	2f62      	cmp	r7, #98	; 0x62
 8004306:	d80a      	bhi.n	800431e <_printf_i+0x32>
 8004308:	2f00      	cmp	r7, #0
 800430a:	f000 80d8 	beq.w	80044be <_printf_i+0x1d2>
 800430e:	2f58      	cmp	r7, #88	; 0x58
 8004310:	f000 80a3 	beq.w	800445a <_printf_i+0x16e>
 8004314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800431c:	e03a      	b.n	8004394 <_printf_i+0xa8>
 800431e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004322:	2b15      	cmp	r3, #21
 8004324:	d8f6      	bhi.n	8004314 <_printf_i+0x28>
 8004326:	a101      	add	r1, pc, #4	; (adr r1, 800432c <_printf_i+0x40>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004385 	.word	0x08004385
 8004330:	08004399 	.word	0x08004399
 8004334:	08004315 	.word	0x08004315
 8004338:	08004315 	.word	0x08004315
 800433c:	08004315 	.word	0x08004315
 8004340:	08004315 	.word	0x08004315
 8004344:	08004399 	.word	0x08004399
 8004348:	08004315 	.word	0x08004315
 800434c:	08004315 	.word	0x08004315
 8004350:	08004315 	.word	0x08004315
 8004354:	08004315 	.word	0x08004315
 8004358:	080044a5 	.word	0x080044a5
 800435c:	080043c9 	.word	0x080043c9
 8004360:	08004487 	.word	0x08004487
 8004364:	08004315 	.word	0x08004315
 8004368:	08004315 	.word	0x08004315
 800436c:	080044c7 	.word	0x080044c7
 8004370:	08004315 	.word	0x08004315
 8004374:	080043c9 	.word	0x080043c9
 8004378:	08004315 	.word	0x08004315
 800437c:	08004315 	.word	0x08004315
 8004380:	0800448f 	.word	0x0800448f
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e0a3      	b.n	80044e0 <_printf_i+0x1f4>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	6829      	ldr	r1, [r5, #0]
 800439c:	0606      	lsls	r6, r0, #24
 800439e:	f101 0304 	add.w	r3, r1, #4
 80043a2:	d50a      	bpl.n	80043ba <_printf_i+0xce>
 80043a4:	680e      	ldr	r6, [r1, #0]
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	2e00      	cmp	r6, #0
 80043aa:	da03      	bge.n	80043b4 <_printf_i+0xc8>
 80043ac:	232d      	movs	r3, #45	; 0x2d
 80043ae:	4276      	negs	r6, r6
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b4:	485e      	ldr	r0, [pc, #376]	; (8004530 <_printf_i+0x244>)
 80043b6:	230a      	movs	r3, #10
 80043b8:	e019      	b.n	80043ee <_printf_i+0x102>
 80043ba:	680e      	ldr	r6, [r1, #0]
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c2:	bf18      	it	ne
 80043c4:	b236      	sxthne	r6, r6
 80043c6:	e7ef      	b.n	80043a8 <_printf_i+0xbc>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	1d19      	adds	r1, r3, #4
 80043ce:	6029      	str	r1, [r5, #0]
 80043d0:	0601      	lsls	r1, r0, #24
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0xec>
 80043d4:	681e      	ldr	r6, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0xf2>
 80043d8:	0646      	lsls	r6, r0, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0xe8>
 80043dc:	881e      	ldrh	r6, [r3, #0]
 80043de:	4854      	ldr	r0, [pc, #336]	; (8004530 <_printf_i+0x244>)
 80043e0:	2f6f      	cmp	r7, #111	; 0x6f
 80043e2:	bf0c      	ite	eq
 80043e4:	2308      	moveq	r3, #8
 80043e6:	230a      	movne	r3, #10
 80043e8:	2100      	movs	r1, #0
 80043ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ee:	6865      	ldr	r5, [r4, #4]
 80043f0:	60a5      	str	r5, [r4, #8]
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	bfa2      	ittt	ge
 80043f6:	6821      	ldrge	r1, [r4, #0]
 80043f8:	f021 0104 	bicge.w	r1, r1, #4
 80043fc:	6021      	strge	r1, [r4, #0]
 80043fe:	b90e      	cbnz	r6, 8004404 <_printf_i+0x118>
 8004400:	2d00      	cmp	r5, #0
 8004402:	d04d      	beq.n	80044a0 <_printf_i+0x1b4>
 8004404:	4615      	mov	r5, r2
 8004406:	fbb6 f1f3 	udiv	r1, r6, r3
 800440a:	fb03 6711 	mls	r7, r3, r1, r6
 800440e:	5dc7      	ldrb	r7, [r0, r7]
 8004410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004414:	4637      	mov	r7, r6
 8004416:	42bb      	cmp	r3, r7
 8004418:	460e      	mov	r6, r1
 800441a:	d9f4      	bls.n	8004406 <_printf_i+0x11a>
 800441c:	2b08      	cmp	r3, #8
 800441e:	d10b      	bne.n	8004438 <_printf_i+0x14c>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	07de      	lsls	r6, r3, #31
 8004424:	d508      	bpl.n	8004438 <_printf_i+0x14c>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6861      	ldr	r1, [r4, #4]
 800442a:	4299      	cmp	r1, r3
 800442c:	bfde      	ittt	le
 800442e:	2330      	movle	r3, #48	; 0x30
 8004430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004434:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004438:	1b52      	subs	r2, r2, r5
 800443a:	6122      	str	r2, [r4, #16]
 800443c:	f8cd a000 	str.w	sl, [sp]
 8004440:	464b      	mov	r3, r9
 8004442:	aa03      	add	r2, sp, #12
 8004444:	4621      	mov	r1, r4
 8004446:	4640      	mov	r0, r8
 8004448:	f7ff fee2 	bl	8004210 <_printf_common>
 800444c:	3001      	adds	r0, #1
 800444e:	d14c      	bne.n	80044ea <_printf_i+0x1fe>
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	b004      	add	sp, #16
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	4835      	ldr	r0, [pc, #212]	; (8004530 <_printf_i+0x244>)
 800445c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004460:	6829      	ldr	r1, [r5, #0]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f851 6b04 	ldr.w	r6, [r1], #4
 8004468:	6029      	str	r1, [r5, #0]
 800446a:	061d      	lsls	r5, r3, #24
 800446c:	d514      	bpl.n	8004498 <_printf_i+0x1ac>
 800446e:	07df      	lsls	r7, r3, #31
 8004470:	bf44      	itt	mi
 8004472:	f043 0320 	orrmi.w	r3, r3, #32
 8004476:	6023      	strmi	r3, [r4, #0]
 8004478:	b91e      	cbnz	r6, 8004482 <_printf_i+0x196>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f023 0320 	bic.w	r3, r3, #32
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	2310      	movs	r3, #16
 8004484:	e7b0      	b.n	80043e8 <_printf_i+0xfc>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f043 0320 	orr.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	2378      	movs	r3, #120	; 0x78
 8004490:	4828      	ldr	r0, [pc, #160]	; (8004534 <_printf_i+0x248>)
 8004492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004496:	e7e3      	b.n	8004460 <_printf_i+0x174>
 8004498:	0659      	lsls	r1, r3, #25
 800449a:	bf48      	it	mi
 800449c:	b2b6      	uxthmi	r6, r6
 800449e:	e7e6      	b.n	800446e <_printf_i+0x182>
 80044a0:	4615      	mov	r5, r2
 80044a2:	e7bb      	b.n	800441c <_printf_i+0x130>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	6826      	ldr	r6, [r4, #0]
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6028      	str	r0, [r5, #0]
 80044ae:	0635      	lsls	r5, r6, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x1cc>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1d2>
 80044b8:	0670      	lsls	r0, r6, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x1c8>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	4615      	mov	r5, r2
 80044c4:	e7ba      	b.n	800443c <_printf_i+0x150>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7fb fe7c 	bl	80001d0 <memchr>
 80044d8:	b108      	cbz	r0, 80044de <_printf_i+0x1f2>
 80044da:	1b40      	subs	r0, r0, r5
 80044dc:	6060      	str	r0, [r4, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	e7a8      	b.n	800443c <_printf_i+0x150>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0ab      	beq.n	8004450 <_printf_i+0x164>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d413      	bmi.n	8004526 <_printf_i+0x23a>
 80044fe:	68e0      	ldr	r0, [r4, #12]
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	4298      	cmp	r0, r3
 8004504:	bfb8      	it	lt
 8004506:	4618      	movlt	r0, r3
 8004508:	e7a4      	b.n	8004454 <_printf_i+0x168>
 800450a:	2301      	movs	r3, #1
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d09b      	beq.n	8004450 <_printf_i+0x164>
 8004518:	3501      	adds	r5, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	9903      	ldr	r1, [sp, #12]
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	42ab      	cmp	r3, r5
 8004522:	dcf2      	bgt.n	800450a <_printf_i+0x21e>
 8004524:	e7eb      	b.n	80044fe <_printf_i+0x212>
 8004526:	2500      	movs	r5, #0
 8004528:	f104 0619 	add.w	r6, r4, #25
 800452c:	e7f5      	b.n	800451a <_printf_i+0x22e>
 800452e:	bf00      	nop
 8004530:	08004e43 	.word	0x08004e43
 8004534:	08004e54 	.word	0x08004e54

08004538 <_sbrk_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d06      	ldr	r5, [pc, #24]	; (8004554 <_sbrk_r+0x1c>)
 800453c:	2300      	movs	r3, #0
 800453e:	4604      	mov	r4, r0
 8004540:	4608      	mov	r0, r1
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	f7fc f9a6 	bl	8000894 <_sbrk>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_sbrk_r+0x1a>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_sbrk_r+0x1a>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	200001b8 	.word	0x200001b8

08004558 <__swbuf_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	460e      	mov	r6, r1
 800455c:	4614      	mov	r4, r2
 800455e:	4605      	mov	r5, r0
 8004560:	b118      	cbz	r0, 800456a <__swbuf_r+0x12>
 8004562:	6983      	ldr	r3, [r0, #24]
 8004564:	b90b      	cbnz	r3, 800456a <__swbuf_r+0x12>
 8004566:	f000 f9d9 	bl	800491c <__sinit>
 800456a:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <__swbuf_r+0x98>)
 800456c:	429c      	cmp	r4, r3
 800456e:	d12b      	bne.n	80045c8 <__swbuf_r+0x70>
 8004570:	686c      	ldr	r4, [r5, #4]
 8004572:	69a3      	ldr	r3, [r4, #24]
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	071a      	lsls	r2, r3, #28
 800457a:	d52f      	bpl.n	80045dc <__swbuf_r+0x84>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	b36b      	cbz	r3, 80045dc <__swbuf_r+0x84>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1ac0      	subs	r0, r0, r3
 8004586:	6963      	ldr	r3, [r4, #20]
 8004588:	b2f6      	uxtb	r6, r6
 800458a:	4283      	cmp	r3, r0
 800458c:	4637      	mov	r7, r6
 800458e:	dc04      	bgt.n	800459a <__swbuf_r+0x42>
 8004590:	4621      	mov	r1, r4
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f92e 	bl	80047f4 <_fflush_r>
 8004598:	bb30      	cbnz	r0, 80045e8 <__swbuf_r+0x90>
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	3b01      	subs	r3, #1
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6022      	str	r2, [r4, #0]
 80045a6:	701e      	strb	r6, [r3, #0]
 80045a8:	6963      	ldr	r3, [r4, #20]
 80045aa:	3001      	adds	r0, #1
 80045ac:	4283      	cmp	r3, r0
 80045ae:	d004      	beq.n	80045ba <__swbuf_r+0x62>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d506      	bpl.n	80045c4 <__swbuf_r+0x6c>
 80045b6:	2e0a      	cmp	r6, #10
 80045b8:	d104      	bne.n	80045c4 <__swbuf_r+0x6c>
 80045ba:	4621      	mov	r1, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	f000 f919 	bl	80047f4 <_fflush_r>
 80045c2:	b988      	cbnz	r0, 80045e8 <__swbuf_r+0x90>
 80045c4:	4638      	mov	r0, r7
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <__swbuf_r+0x9c>)
 80045ca:	429c      	cmp	r4, r3
 80045cc:	d101      	bne.n	80045d2 <__swbuf_r+0x7a>
 80045ce:	68ac      	ldr	r4, [r5, #8]
 80045d0:	e7cf      	b.n	8004572 <__swbuf_r+0x1a>
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <__swbuf_r+0xa0>)
 80045d4:	429c      	cmp	r4, r3
 80045d6:	bf08      	it	eq
 80045d8:	68ec      	ldreq	r4, [r5, #12]
 80045da:	e7ca      	b.n	8004572 <__swbuf_r+0x1a>
 80045dc:	4621      	mov	r1, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f80c 	bl	80045fc <__swsetup_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d0cb      	beq.n	8004580 <__swbuf_r+0x28>
 80045e8:	f04f 37ff 	mov.w	r7, #4294967295
 80045ec:	e7ea      	b.n	80045c4 <__swbuf_r+0x6c>
 80045ee:	bf00      	nop
 80045f0:	08004e88 	.word	0x08004e88
 80045f4:	08004ea8 	.word	0x08004ea8
 80045f8:	08004e68 	.word	0x08004e68

080045fc <__swsetup_r>:
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <__swsetup_r+0xcc>)
 80045fe:	b570      	push	{r4, r5, r6, lr}
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	4606      	mov	r6, r0
 8004604:	460c      	mov	r4, r1
 8004606:	b125      	cbz	r5, 8004612 <__swsetup_r+0x16>
 8004608:	69ab      	ldr	r3, [r5, #24]
 800460a:	b913      	cbnz	r3, 8004612 <__swsetup_r+0x16>
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f985 	bl	800491c <__sinit>
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <__swsetup_r+0xd0>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d10f      	bne.n	8004638 <__swsetup_r+0x3c>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004620:	0719      	lsls	r1, r3, #28
 8004622:	d42c      	bmi.n	800467e <__swsetup_r+0x82>
 8004624:	06dd      	lsls	r5, r3, #27
 8004626:	d411      	bmi.n	800464c <__swsetup_r+0x50>
 8004628:	2309      	movs	r3, #9
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	e03e      	b.n	80046b6 <__swsetup_r+0xba>
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <__swsetup_r+0xd4>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d101      	bne.n	8004642 <__swsetup_r+0x46>
 800463e:	68ac      	ldr	r4, [r5, #8]
 8004640:	e7eb      	b.n	800461a <__swsetup_r+0x1e>
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <__swsetup_r+0xd8>)
 8004644:	429c      	cmp	r4, r3
 8004646:	bf08      	it	eq
 8004648:	68ec      	ldreq	r4, [r5, #12]
 800464a:	e7e6      	b.n	800461a <__swsetup_r+0x1e>
 800464c:	0758      	lsls	r0, r3, #29
 800464e:	d512      	bpl.n	8004676 <__swsetup_r+0x7a>
 8004650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004652:	b141      	cbz	r1, 8004666 <__swsetup_r+0x6a>
 8004654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <__swsetup_r+0x66>
 800465c:	4630      	mov	r0, r6
 800465e:	f7ff fb9d 	bl	8003d9c <_free_r>
 8004662:	2300      	movs	r3, #0
 8004664:	6363      	str	r3, [r4, #52]	; 0x34
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	b94b      	cbnz	r3, 8004696 <__swsetup_r+0x9a>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d003      	beq.n	8004696 <__swsetup_r+0x9a>
 800468e:	4621      	mov	r1, r4
 8004690:	4630      	mov	r0, r6
 8004692:	f000 fa09 	bl	8004aa8 <__smakebuf_r>
 8004696:	89a0      	ldrh	r0, [r4, #12]
 8004698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800469c:	f010 0301 	ands.w	r3, r0, #1
 80046a0:	d00a      	beq.n	80046b8 <__swsetup_r+0xbc>
 80046a2:	2300      	movs	r3, #0
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6963      	ldr	r3, [r4, #20]
 80046a8:	425b      	negs	r3, r3
 80046aa:	61a3      	str	r3, [r4, #24]
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	b943      	cbnz	r3, 80046c2 <__swsetup_r+0xc6>
 80046b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046b4:	d1ba      	bne.n	800462c <__swsetup_r+0x30>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	0781      	lsls	r1, r0, #30
 80046ba:	bf58      	it	pl
 80046bc:	6963      	ldrpl	r3, [r4, #20]
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	e7f4      	b.n	80046ac <__swsetup_r+0xb0>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e7f7      	b.n	80046b6 <__swsetup_r+0xba>
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c
 80046cc:	08004e88 	.word	0x08004e88
 80046d0:	08004ea8 	.word	0x08004ea8
 80046d4:	08004e68 	.word	0x08004e68

080046d8 <abort>:
 80046d8:	b508      	push	{r3, lr}
 80046da:	2006      	movs	r0, #6
 80046dc:	f000 fa58 	bl	8004b90 <raise>
 80046e0:	2001      	movs	r0, #1
 80046e2:	f7fc f85f 	bl	80007a4 <_exit>
	...

080046e8 <__sflush_r>:
 80046e8:	898a      	ldrh	r2, [r1, #12]
 80046ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	0710      	lsls	r0, r2, #28
 80046f2:	460c      	mov	r4, r1
 80046f4:	d458      	bmi.n	80047a8 <__sflush_r+0xc0>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc05      	bgt.n	8004708 <__sflush_r+0x20>
 80046fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dc02      	bgt.n	8004708 <__sflush_r+0x20>
 8004702:	2000      	movs	r0, #0
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800470a:	2e00      	cmp	r6, #0
 800470c:	d0f9      	beq.n	8004702 <__sflush_r+0x1a>
 800470e:	2300      	movs	r3, #0
 8004710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004714:	682f      	ldr	r7, [r5, #0]
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	d032      	beq.n	8004780 <__sflush_r+0x98>
 800471a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	075a      	lsls	r2, r3, #29
 8004720:	d505      	bpl.n	800472e <__sflush_r+0x46>
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	1ac0      	subs	r0, r0, r3
 8004726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004728:	b10b      	cbz	r3, 800472e <__sflush_r+0x46>
 800472a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	2300      	movs	r3, #0
 8004730:	4602      	mov	r2, r0
 8004732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004734:	6a21      	ldr	r1, [r4, #32]
 8004736:	4628      	mov	r0, r5
 8004738:	47b0      	blx	r6
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	d106      	bne.n	800474e <__sflush_r+0x66>
 8004740:	6829      	ldr	r1, [r5, #0]
 8004742:	291d      	cmp	r1, #29
 8004744:	d82c      	bhi.n	80047a0 <__sflush_r+0xb8>
 8004746:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <__sflush_r+0x108>)
 8004748:	40ca      	lsrs	r2, r1
 800474a:	07d6      	lsls	r6, r2, #31
 800474c:	d528      	bpl.n	80047a0 <__sflush_r+0xb8>
 800474e:	2200      	movs	r2, #0
 8004750:	6062      	str	r2, [r4, #4]
 8004752:	04d9      	lsls	r1, r3, #19
 8004754:	6922      	ldr	r2, [r4, #16]
 8004756:	6022      	str	r2, [r4, #0]
 8004758:	d504      	bpl.n	8004764 <__sflush_r+0x7c>
 800475a:	1c42      	adds	r2, r0, #1
 800475c:	d101      	bne.n	8004762 <__sflush_r+0x7a>
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	b903      	cbnz	r3, 8004764 <__sflush_r+0x7c>
 8004762:	6560      	str	r0, [r4, #84]	; 0x54
 8004764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004766:	602f      	str	r7, [r5, #0]
 8004768:	2900      	cmp	r1, #0
 800476a:	d0ca      	beq.n	8004702 <__sflush_r+0x1a>
 800476c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004770:	4299      	cmp	r1, r3
 8004772:	d002      	beq.n	800477a <__sflush_r+0x92>
 8004774:	4628      	mov	r0, r5
 8004776:	f7ff fb11 	bl	8003d9c <_free_r>
 800477a:	2000      	movs	r0, #0
 800477c:	6360      	str	r0, [r4, #52]	; 0x34
 800477e:	e7c1      	b.n	8004704 <__sflush_r+0x1c>
 8004780:	6a21      	ldr	r1, [r4, #32]
 8004782:	2301      	movs	r3, #1
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	1c41      	adds	r1, r0, #1
 800478a:	d1c7      	bne.n	800471c <__sflush_r+0x34>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0c4      	beq.n	800471c <__sflush_r+0x34>
 8004792:	2b1d      	cmp	r3, #29
 8004794:	d001      	beq.n	800479a <__sflush_r+0xb2>
 8004796:	2b16      	cmp	r3, #22
 8004798:	d101      	bne.n	800479e <__sflush_r+0xb6>
 800479a:	602f      	str	r7, [r5, #0]
 800479c:	e7b1      	b.n	8004702 <__sflush_r+0x1a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	e7ad      	b.n	8004704 <__sflush_r+0x1c>
 80047a8:	690f      	ldr	r7, [r1, #16]
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d0a9      	beq.n	8004702 <__sflush_r+0x1a>
 80047ae:	0793      	lsls	r3, r2, #30
 80047b0:	680e      	ldr	r6, [r1, #0]
 80047b2:	bf08      	it	eq
 80047b4:	694b      	ldreq	r3, [r1, #20]
 80047b6:	600f      	str	r7, [r1, #0]
 80047b8:	bf18      	it	ne
 80047ba:	2300      	movne	r3, #0
 80047bc:	eba6 0807 	sub.w	r8, r6, r7
 80047c0:	608b      	str	r3, [r1, #8]
 80047c2:	f1b8 0f00 	cmp.w	r8, #0
 80047c6:	dd9c      	ble.n	8004702 <__sflush_r+0x1a>
 80047c8:	6a21      	ldr	r1, [r4, #32]
 80047ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047cc:	4643      	mov	r3, r8
 80047ce:	463a      	mov	r2, r7
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b0      	blx	r6
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dc06      	bgt.n	80047e6 <__sflush_r+0xfe>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e78e      	b.n	8004704 <__sflush_r+0x1c>
 80047e6:	4407      	add	r7, r0
 80047e8:	eba8 0800 	sub.w	r8, r8, r0
 80047ec:	e7e9      	b.n	80047c2 <__sflush_r+0xda>
 80047ee:	bf00      	nop
 80047f0:	20400001 	.word	0x20400001

080047f4 <_fflush_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	b913      	cbnz	r3, 8004804 <_fflush_r+0x10>
 80047fe:	2500      	movs	r5, #0
 8004800:	4628      	mov	r0, r5
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	b118      	cbz	r0, 800480e <_fflush_r+0x1a>
 8004806:	6983      	ldr	r3, [r0, #24]
 8004808:	b90b      	cbnz	r3, 800480e <_fflush_r+0x1a>
 800480a:	f000 f887 	bl	800491c <__sinit>
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <_fflush_r+0x6c>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d11b      	bne.n	800484c <_fflush_r+0x58>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ef      	beq.n	80047fe <_fflush_r+0xa>
 800481e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004820:	07d0      	lsls	r0, r2, #31
 8004822:	d404      	bmi.n	800482e <_fflush_r+0x3a>
 8004824:	0599      	lsls	r1, r3, #22
 8004826:	d402      	bmi.n	800482e <_fflush_r+0x3a>
 8004828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800482a:	f000 f915 	bl	8004a58 <__retarget_lock_acquire_recursive>
 800482e:	4628      	mov	r0, r5
 8004830:	4621      	mov	r1, r4
 8004832:	f7ff ff59 	bl	80046e8 <__sflush_r>
 8004836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004838:	07da      	lsls	r2, r3, #31
 800483a:	4605      	mov	r5, r0
 800483c:	d4e0      	bmi.n	8004800 <_fflush_r+0xc>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	d4dd      	bmi.n	8004800 <_fflush_r+0xc>
 8004844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004846:	f000 f908 	bl	8004a5a <__retarget_lock_release_recursive>
 800484a:	e7d9      	b.n	8004800 <_fflush_r+0xc>
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <_fflush_r+0x70>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <_fflush_r+0x62>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7df      	b.n	8004816 <_fflush_r+0x22>
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <_fflush_r+0x74>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7da      	b.n	8004816 <_fflush_r+0x22>
 8004860:	08004e88 	.word	0x08004e88
 8004864:	08004ea8 	.word	0x08004ea8
 8004868:	08004e68 	.word	0x08004e68

0800486c <std>:
 800486c:	2300      	movs	r3, #0
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	e9c0 3300 	strd	r3, r3, [r0]
 8004876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800487a:	6083      	str	r3, [r0, #8]
 800487c:	8181      	strh	r1, [r0, #12]
 800487e:	6643      	str	r3, [r0, #100]	; 0x64
 8004880:	81c2      	strh	r2, [r0, #14]
 8004882:	6183      	str	r3, [r0, #24]
 8004884:	4619      	mov	r1, r3
 8004886:	2208      	movs	r2, #8
 8004888:	305c      	adds	r0, #92	; 0x5c
 800488a:	f7ff f9af 	bl	8003bec <memset>
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <std+0x38>)
 8004890:	6263      	str	r3, [r4, #36]	; 0x24
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <std+0x3c>)
 8004894:	62a3      	str	r3, [r4, #40]	; 0x28
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <std+0x40>)
 8004898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <std+0x44>)
 800489c:	6224      	str	r4, [r4, #32]
 800489e:	6323      	str	r3, [r4, #48]	; 0x30
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	bf00      	nop
 80048a4:	08004bc9 	.word	0x08004bc9
 80048a8:	08004beb 	.word	0x08004beb
 80048ac:	08004c23 	.word	0x08004c23
 80048b0:	08004c47 	.word	0x08004c47

080048b4 <_cleanup_r>:
 80048b4:	4901      	ldr	r1, [pc, #4]	; (80048bc <_cleanup_r+0x8>)
 80048b6:	f000 b8af 	b.w	8004a18 <_fwalk_reent>
 80048ba:	bf00      	nop
 80048bc:	080047f5 	.word	0x080047f5

080048c0 <__sfmoreglue>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	2268      	movs	r2, #104	; 0x68
 80048c4:	1e4d      	subs	r5, r1, #1
 80048c6:	4355      	muls	r5, r2
 80048c8:	460e      	mov	r6, r1
 80048ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048ce:	f7ff fad1 	bl	8003e74 <_malloc_r>
 80048d2:	4604      	mov	r4, r0
 80048d4:	b140      	cbz	r0, 80048e8 <__sfmoreglue+0x28>
 80048d6:	2100      	movs	r1, #0
 80048d8:	e9c0 1600 	strd	r1, r6, [r0]
 80048dc:	300c      	adds	r0, #12
 80048de:	60a0      	str	r0, [r4, #8]
 80048e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048e4:	f7ff f982 	bl	8003bec <memset>
 80048e8:	4620      	mov	r0, r4
 80048ea:	bd70      	pop	{r4, r5, r6, pc}

080048ec <__sfp_lock_acquire>:
 80048ec:	4801      	ldr	r0, [pc, #4]	; (80048f4 <__sfp_lock_acquire+0x8>)
 80048ee:	f000 b8b3 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 80048f2:	bf00      	nop
 80048f4:	200001bd 	.word	0x200001bd

080048f8 <__sfp_lock_release>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__sfp_lock_release+0x8>)
 80048fa:	f000 b8ae 	b.w	8004a5a <__retarget_lock_release_recursive>
 80048fe:	bf00      	nop
 8004900:	200001bd 	.word	0x200001bd

08004904 <__sinit_lock_acquire>:
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <__sinit_lock_acquire+0x8>)
 8004906:	f000 b8a7 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 800490a:	bf00      	nop
 800490c:	200001be 	.word	0x200001be

08004910 <__sinit_lock_release>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__sinit_lock_release+0x8>)
 8004912:	f000 b8a2 	b.w	8004a5a <__retarget_lock_release_recursive>
 8004916:	bf00      	nop
 8004918:	200001be 	.word	0x200001be

0800491c <__sinit>:
 800491c:	b510      	push	{r4, lr}
 800491e:	4604      	mov	r4, r0
 8004920:	f7ff fff0 	bl	8004904 <__sinit_lock_acquire>
 8004924:	69a3      	ldr	r3, [r4, #24]
 8004926:	b11b      	cbz	r3, 8004930 <__sinit+0x14>
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	f7ff bff0 	b.w	8004910 <__sinit_lock_release>
 8004930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004934:	6523      	str	r3, [r4, #80]	; 0x50
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <__sinit+0x68>)
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <__sinit+0x6c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62a2      	str	r2, [r4, #40]	; 0x28
 800493e:	42a3      	cmp	r3, r4
 8004940:	bf04      	itt	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	61a3      	streq	r3, [r4, #24]
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f820 	bl	800498c <__sfp>
 800494c:	6060      	str	r0, [r4, #4]
 800494e:	4620      	mov	r0, r4
 8004950:	f000 f81c 	bl	800498c <__sfp>
 8004954:	60a0      	str	r0, [r4, #8]
 8004956:	4620      	mov	r0, r4
 8004958:	f000 f818 	bl	800498c <__sfp>
 800495c:	2200      	movs	r2, #0
 800495e:	60e0      	str	r0, [r4, #12]
 8004960:	2104      	movs	r1, #4
 8004962:	6860      	ldr	r0, [r4, #4]
 8004964:	f7ff ff82 	bl	800486c <std>
 8004968:	68a0      	ldr	r0, [r4, #8]
 800496a:	2201      	movs	r2, #1
 800496c:	2109      	movs	r1, #9
 800496e:	f7ff ff7d 	bl	800486c <std>
 8004972:	68e0      	ldr	r0, [r4, #12]
 8004974:	2202      	movs	r2, #2
 8004976:	2112      	movs	r1, #18
 8004978:	f7ff ff78 	bl	800486c <std>
 800497c:	2301      	movs	r3, #1
 800497e:	61a3      	str	r3, [r4, #24]
 8004980:	e7d2      	b.n	8004928 <__sinit+0xc>
 8004982:	bf00      	nop
 8004984:	08004d80 	.word	0x08004d80
 8004988:	080048b5 	.word	0x080048b5

0800498c <__sfp>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	4607      	mov	r7, r0
 8004990:	f7ff ffac 	bl	80048ec <__sfp_lock_acquire>
 8004994:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <__sfp+0x84>)
 8004996:	681e      	ldr	r6, [r3, #0]
 8004998:	69b3      	ldr	r3, [r6, #24]
 800499a:	b913      	cbnz	r3, 80049a2 <__sfp+0x16>
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff ffbd 	bl	800491c <__sinit>
 80049a2:	3648      	adds	r6, #72	; 0x48
 80049a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	d503      	bpl.n	80049b4 <__sfp+0x28>
 80049ac:	6833      	ldr	r3, [r6, #0]
 80049ae:	b30b      	cbz	r3, 80049f4 <__sfp+0x68>
 80049b0:	6836      	ldr	r6, [r6, #0]
 80049b2:	e7f7      	b.n	80049a4 <__sfp+0x18>
 80049b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049b8:	b9d5      	cbnz	r5, 80049f0 <__sfp+0x64>
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <__sfp+0x88>)
 80049bc:	60e3      	str	r3, [r4, #12]
 80049be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049c2:	6665      	str	r5, [r4, #100]	; 0x64
 80049c4:	f000 f847 	bl	8004a56 <__retarget_lock_init_recursive>
 80049c8:	f7ff ff96 	bl	80048f8 <__sfp_lock_release>
 80049cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049d4:	6025      	str	r5, [r4, #0]
 80049d6:	61a5      	str	r5, [r4, #24]
 80049d8:	2208      	movs	r2, #8
 80049da:	4629      	mov	r1, r5
 80049dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049e0:	f7ff f904 	bl	8003bec <memset>
 80049e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049ec:	4620      	mov	r0, r4
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f0:	3468      	adds	r4, #104	; 0x68
 80049f2:	e7d9      	b.n	80049a8 <__sfp+0x1c>
 80049f4:	2104      	movs	r1, #4
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ff62 	bl	80048c0 <__sfmoreglue>
 80049fc:	4604      	mov	r4, r0
 80049fe:	6030      	str	r0, [r6, #0]
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d1d5      	bne.n	80049b0 <__sfp+0x24>
 8004a04:	f7ff ff78 	bl	80048f8 <__sfp_lock_release>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	e7ee      	b.n	80049ec <__sfp+0x60>
 8004a0e:	bf00      	nop
 8004a10:	08004d80 	.word	0x08004d80
 8004a14:	ffff0001 	.word	0xffff0001

08004a18 <_fwalk_reent>:
 8004a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	4688      	mov	r8, r1
 8004a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a24:	2700      	movs	r7, #0
 8004a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a2e:	d505      	bpl.n	8004a3c <_fwalk_reent+0x24>
 8004a30:	6824      	ldr	r4, [r4, #0]
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	d1f7      	bne.n	8004a26 <_fwalk_reent+0xe>
 8004a36:	4638      	mov	r0, r7
 8004a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3c:	89ab      	ldrh	r3, [r5, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d907      	bls.n	8004a52 <_fwalk_reent+0x3a>
 8004a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a46:	3301      	adds	r3, #1
 8004a48:	d003      	beq.n	8004a52 <_fwalk_reent+0x3a>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	47c0      	blx	r8
 8004a50:	4307      	orrs	r7, r0
 8004a52:	3568      	adds	r5, #104	; 0x68
 8004a54:	e7e9      	b.n	8004a2a <_fwalk_reent+0x12>

08004a56 <__retarget_lock_init_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <__retarget_lock_acquire_recursive>:
 8004a58:	4770      	bx	lr

08004a5a <__retarget_lock_release_recursive>:
 8004a5a:	4770      	bx	lr

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460e      	mov	r6, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	; 0x58
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	da08      	bge.n	8004a80 <__swhatbuf_r+0x24>
 8004a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	602a      	str	r2, [r5, #0]
 8004a76:	061a      	lsls	r2, r3, #24
 8004a78:	d410      	bmi.n	8004a9c <__swhatbuf_r+0x40>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7e:	e00e      	b.n	8004a9e <__swhatbuf_r+0x42>
 8004a80:	466a      	mov	r2, sp
 8004a82:	f000 f907 	bl	8004c94 <_fstat_r>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	dbf1      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a8a:	9a01      	ldr	r2, [sp, #4]
 8004a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a94:	425a      	negs	r2, r3
 8004a96:	415a      	adcs	r2, r3
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	e7ee      	b.n	8004a7a <__swhatbuf_r+0x1e>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	b016      	add	sp, #88	; 0x58
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffc8 	bl	8004a5c <__swhatbuf_r>
 8004acc:	9900      	ldr	r1, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7ff f9cf 	bl	8003e74 <_malloc_r>
 8004ad6:	b948      	cbnz	r0, 8004aec <__smakebuf_r+0x44>
 8004ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d4ef      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e7e3      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <__smakebuf_r+0x7c>)
 8004aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	6020      	str	r0, [r4, #0]
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	6163      	str	r3, [r4, #20]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	6120      	str	r0, [r4, #16]
 8004b02:	b15b      	cbz	r3, 8004b1c <__smakebuf_r+0x74>
 8004b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 f8d5 	bl	8004cb8 <_isatty_r>
 8004b0e:	b128      	cbz	r0, 8004b1c <__smakebuf_r+0x74>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	89a0      	ldrh	r0, [r4, #12]
 8004b1e:	4305      	orrs	r5, r0
 8004b20:	81a5      	strh	r5, [r4, #12]
 8004b22:	e7cd      	b.n	8004ac0 <__smakebuf_r+0x18>
 8004b24:	080048b5 	.word	0x080048b5

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f7ff bf95 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	200001bc 	.word	0x200001bc

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f7ff bf90 	b.w	8004a5a <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	200001bc 	.word	0x200001bc

08004b40 <_raise_r>:
 8004b40:	291f      	cmp	r1, #31
 8004b42:	b538      	push	{r3, r4, r5, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	460d      	mov	r5, r1
 8004b48:	d904      	bls.n	8004b54 <_raise_r+0x14>
 8004b4a:	2316      	movs	r3, #22
 8004b4c:	6003      	str	r3, [r0, #0]
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b56:	b112      	cbz	r2, 8004b5e <_raise_r+0x1e>
 8004b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b5c:	b94b      	cbnz	r3, 8004b72 <_raise_r+0x32>
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 f830 	bl	8004bc4 <_getpid_r>
 8004b64:	462a      	mov	r2, r5
 8004b66:	4601      	mov	r1, r0
 8004b68:	4620      	mov	r0, r4
 8004b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b6e:	f000 b817 	b.w	8004ba0 <_kill_r>
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d00a      	beq.n	8004b8c <_raise_r+0x4c>
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	d103      	bne.n	8004b82 <_raise_r+0x42>
 8004b7a:	2316      	movs	r3, #22
 8004b7c:	6003      	str	r3, [r0, #0]
 8004b7e:	2001      	movs	r0, #1
 8004b80:	e7e7      	b.n	8004b52 <_raise_r+0x12>
 8004b82:	2400      	movs	r4, #0
 8004b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	4798      	blx	r3
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e7e0      	b.n	8004b52 <_raise_r+0x12>

08004b90 <raise>:
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <raise+0xc>)
 8004b92:	4601      	mov	r1, r0
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f7ff bfd3 	b.w	8004b40 <_raise_r>
 8004b9a:	bf00      	nop
 8004b9c:	2000000c 	.word	0x2000000c

08004ba0 <_kill_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	; (8004bc0 <_kill_r+0x20>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	f7fb fde9 	bl	8000784 <_kill>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	d102      	bne.n	8004bbc <_kill_r+0x1c>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	b103      	cbz	r3, 8004bbc <_kill_r+0x1c>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200001b8 	.word	0x200001b8

08004bc4 <_getpid_r>:
 8004bc4:	f7fb bdd6 	b.w	8000774 <_getpid>

08004bc8 <__sread>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	f000 f894 	bl	8004cfc <_read_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bfab      	itete	ge
 8004bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bda:	89a3      	ldrhlt	r3, [r4, #12]
 8004bdc:	181b      	addge	r3, r3, r0
 8004bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004be2:	bfac      	ite	ge
 8004be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be6:	81a3      	strhlt	r3, [r4, #12]
 8004be8:	bd10      	pop	{r4, pc}

08004bea <__swrite>:
 8004bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	461f      	mov	r7, r3
 8004bf0:	898b      	ldrh	r3, [r1, #12]
 8004bf2:	05db      	lsls	r3, r3, #23
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	d505      	bpl.n	8004c08 <__swrite+0x1e>
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	2302      	movs	r3, #2
 8004c02:	2200      	movs	r2, #0
 8004c04:	f000 f868 	bl	8004cd8 <_lseek_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	4628      	mov	r0, r5
 8004c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1e:	f000 b817 	b.w	8004c50 <_write_r>

08004c22 <__sseek>:
 8004c22:	b510      	push	{r4, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2a:	f000 f855 	bl	8004cd8 <_lseek_r>
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	bf15      	itete	ne
 8004c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3e:	81a3      	strheq	r3, [r4, #12]
 8004c40:	bf18      	it	ne
 8004c42:	81a3      	strhne	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__sclose>:
 8004c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4a:	f000 b813 	b.w	8004c74 <_close_r>
	...

08004c50 <_write_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d07      	ldr	r5, [pc, #28]	; (8004c70 <_write_r+0x20>)
 8004c54:	4604      	mov	r4, r0
 8004c56:	4608      	mov	r0, r1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fb fdc7 	bl	80007f2 <_write>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_write_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_write_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200001b8 	.word	0x200001b8

08004c74 <_close_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_close_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fb fdd3 	bl	800082a <_close>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_close_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_close_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200001b8 	.word	0x200001b8

08004c94 <_fstat_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d07      	ldr	r5, [pc, #28]	; (8004cb4 <_fstat_r+0x20>)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	f7fb fdce 	bl	8000842 <_fstat>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	d102      	bne.n	8004cb0 <_fstat_r+0x1c>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b103      	cbz	r3, 8004cb0 <_fstat_r+0x1c>
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200001b8 	.word	0x200001b8

08004cb8 <_isatty_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d06      	ldr	r5, [pc, #24]	; (8004cd4 <_isatty_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fb fdcd 	bl	8000862 <_isatty>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_isatty_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_isatty_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200001b8 	.word	0x200001b8

08004cd8 <_lseek_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	; (8004cf8 <_lseek_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fb fdc6 	bl	8000878 <_lseek>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_lseek_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_lseek_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200001b8 	.word	0x200001b8

08004cfc <_read_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d07      	ldr	r5, [pc, #28]	; (8004d1c <_read_r+0x20>)
 8004d00:	4604      	mov	r4, r0
 8004d02:	4608      	mov	r0, r1
 8004d04:	4611      	mov	r1, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f7fb fd54 	bl	80007b8 <_read>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_read_r+0x1e>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_read_r+0x1e>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200001b8 	.word	0x200001b8

08004d20 <_gettimeofday>:
 8004d20:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <_gettimeofday+0xc>)
 8004d22:	2258      	movs	r2, #88	; 0x58
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	4770      	bx	lr
 8004d2c:	200001b8 	.word	0x200001b8

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
